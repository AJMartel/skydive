<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Skydive Docs</title>
    <link>//skydive-project.github.io/skydive/</link>
    <description>Recent content on Skydive Docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 29 Sep 2016 11:02:01 +0200</lastBuildDate>
    <atom:link href="//skydive-project.github.io/skydive/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Architecture</title>
      <link>//skydive-project.github.io/skydive/architecture/</link>
      <pubDate>Thu, 29 Sep 2016 11:02:01 +0200</pubDate>
      
      <guid>//skydive-project.github.io/skydive/architecture/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;//skydive-project.github.io/skydive/images/architecture.png&#34; alt=&#34;Skydive Architecture&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;graph&#34;&gt;Graph&lt;/h2&gt;

&lt;p&gt;Skydive relies on a event based graph engine, which means that notifications
are sent for each modification. Graphs expose notifications over WebSocket
connections. Skydive support multiple graph backends for the Graph. The &lt;code&gt;memory&lt;/code&gt;
backend will be always used by agents while the backend for analyzers can be
choosen. Each modification is kept in the datastore so that we have a full
history of the graph. This is really useful to troubleshoot even if
interfaces do not exist anymore.&lt;/p&gt;

&lt;h2 id=&#34;forwarder&#34;&gt;Forwarder&lt;/h2&gt;

&lt;p&gt;Forwards graph messages from agents to analyzers so that analyzers can build
an aggregation of all agent graphs.&lt;/p&gt;

&lt;h2 id=&#34;topology-probes&#34;&gt;Topology probes&lt;/h2&gt;

&lt;p&gt;Fill the graph with topology informations collected. Multiple probes fill the
graph in parallel. As an example there are probes filling graph with
network namespaces, netlink or OVSDB information.&lt;/p&gt;

&lt;h2 id=&#34;flow-table&#34;&gt;Flow table&lt;/h2&gt;

&lt;p&gt;Skydive keep a track of packets captured in flow tables. It allows Skydive to
keep metrics for each flows. At a given frequency or when the flow expires
(see the config file) flows are forwarded from agents to analyzers and then
to the datastore.&lt;/p&gt;

&lt;h2 id=&#34;flow-enhancer&#34;&gt;Flow enhancer&lt;/h2&gt;

&lt;p&gt;Each time a new flow is received by the analyzer the flow is enhanced with
topology informations like where it has been captured, where it originates from,
where the packet is going to.&lt;/p&gt;

&lt;h2 id=&#34;flow-probes&#34;&gt;Flow probes&lt;/h2&gt;

&lt;p&gt;Flow probes capture packets and fill agent flow tables. There are different
ways to capture packets like sFlow, afpacket, PCAP, etc.&lt;/p&gt;

&lt;h2 id=&#34;gremlin-engine&#34;&gt;Gremlin engine&lt;/h2&gt;

&lt;p&gt;Skydive uses Gremlin language as its graph traversal language. The Skydive
Gremlin implementation allows to use Gremlin for flow traversal purpose.
The Gremlin engine can either retrieve informations from the datastore or from
agents depending whether the request is about something is the past or for live
monitoring/troubleshooting.&lt;/p&gt;

&lt;h2 id=&#34;etcd&#34;&gt;Etcd&lt;/h2&gt;

&lt;p&gt;Skydive uses Etcd to store API objects like captures. Agents are watching Etcd
so that they can react on API calls.&lt;/p&gt;

&lt;h2 id=&#34;on-demand-probe&#34;&gt;On-demand probe&lt;/h2&gt;

&lt;p&gt;This component watches Etcd and the graph in order to start captures. So when a
new capture is created by the API on-demande probe looks for graph nodes
matching the Gremlin expression, and if so, start capturing traffic.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Flows</title>
      <link>//skydive-project.github.io/skydive/api/flows/</link>
      <pubDate>Thu, 29 Sep 2016 11:02:01 +0200</pubDate>
      
      <guid>//skydive-project.github.io/skydive/api/flows/</guid>
      <description>&lt;p&gt;The Flow Schema is described in a
&lt;a href=&#34;https://github.com/skydive-project/skydive/blob/master/flow/flow.proto&#34;&gt;protobuf file&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A typical Gremlin request on Flows will return a JSON version of the Flow
structure.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ skydive client topology query --gremlin &amp;quot;G.Flows().Limit(1)&amp;quot;
[
  {
    &amp;quot;ANodeUUID&amp;quot;: &amp;quot;422190f1-bbde-4eb0-4849-1fd1209229fe&amp;quot;,
    &amp;quot;BNodeUUID&amp;quot;: &amp;quot;f3f1256b-7097-487c-7a02-38a32e009b3c&amp;quot;,
    &amp;quot;LastUpdateMetric&amp;quot;: {
      &amp;quot;ABBytes&amp;quot;: 490,
      &amp;quot;ABPackets&amp;quot;: 5,
      &amp;quot;BABytes&amp;quot;: 490,
      &amp;quot;BAPackets&amp;quot;: 5,
      &amp;quot;Last&amp;quot;: 1477563666,
      &amp;quot;Start&amp;quot;: 1477563661
    },
    &amp;quot;LayersPath&amp;quot;: &amp;quot;Ethernet/IPv4/ICMPv4/Payload&amp;quot;,
    &amp;quot;Link&amp;quot;: {
      &amp;quot;A&amp;quot;: &amp;quot;02:48:4f:c4:40:99&amp;quot;,
      &amp;quot;B&amp;quot;: &amp;quot;e2:d0:f0:61:e7:81&amp;quot;,
      &amp;quot;Protocol&amp;quot;: &amp;quot;ETHERNET&amp;quot;
    },
    &amp;quot;Metric&amp;quot;: {
      &amp;quot;ABBytes&amp;quot;: 21658,
      &amp;quot;ABPackets&amp;quot;: 221,
      &amp;quot;BABytes&amp;quot;: 21658,
      &amp;quot;BAPackets&amp;quot;: 221,
      &amp;quot;Last&amp;quot;: 1477563666,
      &amp;quot;Start&amp;quot;: 1477563444
    },
    &amp;quot;Network&amp;quot;: {
      &amp;quot;A&amp;quot;: &amp;quot;192.168.0.1&amp;quot;,
      &amp;quot;B&amp;quot;: &amp;quot;192.168.0.2&amp;quot;,
      &amp;quot;Protocol&amp;quot;: &amp;quot;IPV4&amp;quot;
    },
    &amp;quot;NodeUUID&amp;quot;: &amp;quot;f3f1256b-7097-487c-7a02-38a32e009b3c&amp;quot;,
    &amp;quot;TrackingID&amp;quot;: &amp;quot;f745fb1f59298a1773e35827adfa42dab4f469f9&amp;quot;,
    &amp;quot;UUID&amp;quot;: &amp;quot;caa24da240cb3b40c84ebb708e2e5dcbe3c54784&amp;quot;
  }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Below the description of the fields :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;UUID&lt;/code&gt;, Unique ID of the flow. The ID is unique per capture point, meaning
that a same flow will get a different ID for a different capture.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TrackingID&lt;/code&gt;, ID of the Flow which is the same across all the
captures point. This ID can be used to follow a Flow on each capture points.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NodeUUID&lt;/code&gt;, ID of the interface node in the topology where the flow was
captured.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ANodeUUID&lt;/code&gt;, ID of the interface node in the topology where the packet is
coming from.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ANodeUUID&lt;/code&gt;, ID of the interface node in the topology where the packet is
going to.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LayersPath&lt;/code&gt;, All the layers composing the packets.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Link&lt;/code&gt;, Link layer of the flow. A, B and Protocol describing the endpoints and
the protocol of this layer.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Network&lt;/code&gt;, Network layer of the flow. A, B and Protocol describing the
endpoints and the protocol of this layer.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Transport&lt;/code&gt;, Transport layer of the flow. A, B and Protocol describing the
endpoints and the protocol of this layer.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Metric&lt;/code&gt;, Current metrics of the flow. &lt;code&gt;AB*&lt;/code&gt; stands for metrics from
endpoint &lt;code&gt;A&lt;/code&gt; to endpoint &lt;code&gt;B&lt;/code&gt;, and &lt;code&gt;BA*&lt;/code&gt; for the reverse path.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Rest API</title>
      <link>//skydive-project.github.io/skydive/api/rest/</link>
      <pubDate>Thu, 29 Sep 2016 11:02:01 +0200</pubDate>
      
      <guid>//skydive-project.github.io/skydive/api/rest/</guid>
      <description>

&lt;h2 id=&#34;topology-flow-request&#34;&gt;Topology/Flow request&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;POST /api/topology HTTP/1.1
Content-Type: application/json

{
  &amp;quot;GremlinQuery&amp;quot;:&amp;quot;G.V()&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8

[
  {
    &amp;quot;Host&amp;quot;: &amp;quot;localhost.localdomain&amp;quot;,
    &amp;quot;ID&amp;quot;: &amp;quot;d6759df3-d4e0-408b-64d3-c82ea6c9aeda&amp;quot;,
    &amp;quot;Metadata&amp;quot;: {
      &amp;quot;Name&amp;quot;: &amp;quot;vm2&amp;quot;,
      &amp;quot;Path&amp;quot;: &amp;quot;/var/run/netns/vm2&amp;quot;,
      &amp;quot;TID&amp;quot;: &amp;quot;7daa39fe-92f7-5f9b-51b1-1dddcd41785c&amp;quot;,
      &amp;quot;Type&amp;quot;: &amp;quot;netns&amp;quot;
    }
  }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;POST /api/topology HTTP/1.1
Content-Type: application/json

{
  &amp;quot;GremlinQuery&amp;quot;:&amp;quot;G.Flows().Limit(1)&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;[
  {
    &amp;quot;ANodeUUID&amp;quot;: &amp;quot;d9d6f8cf-4aa6-4a06-6785-3dc56032ef82&amp;quot;,
    &amp;quot;BNodeUUID&amp;quot;: &amp;quot;488789f9-38be-4eba-704a-79996382de41&amp;quot;,
    &amp;quot;LastUpdateMetric&amp;quot;: {
      &amp;quot;ABBytes&amp;quot;: 490,
      &amp;quot;ABPackets&amp;quot;: 5,
      &amp;quot;BABytes&amp;quot;: 490,
      &amp;quot;BAPackets&amp;quot;: 5,
      &amp;quot;Last&amp;quot;: 1477572621,
      &amp;quot;Start&amp;quot;: 1477572616
    },
    &amp;quot;LayersPath&amp;quot;: &amp;quot;Ethernet/IPv4/ICMPv4/Payload&amp;quot;,
    &amp;quot;Link&amp;quot;: {
      &amp;quot;A&amp;quot;: &amp;quot;02:48:4f:c4:40:99&amp;quot;,
      &amp;quot;B&amp;quot;: &amp;quot;e2:d0:f0:61:e7:81&amp;quot;,
      &amp;quot;Protocol&amp;quot;: &amp;quot;ETHERNET&amp;quot;
    },
    &amp;quot;Metric&amp;quot;: {
      &amp;quot;ABBytes&amp;quot;: 1666,
      &amp;quot;ABPackets&amp;quot;: 17,
      &amp;quot;BABytes&amp;quot;: 1568,
      &amp;quot;BAPackets&amp;quot;: 16,
      &amp;quot;Last&amp;quot;: 1477572622,
      &amp;quot;Start&amp;quot;: 1477572606
    },
    &amp;quot;Network&amp;quot;: {
      &amp;quot;A&amp;quot;: &amp;quot;192.168.0.1&amp;quot;,
      &amp;quot;B&amp;quot;: &amp;quot;192.168.0.2&amp;quot;,
      &amp;quot;Protocol&amp;quot;: &amp;quot;IPV4&amp;quot;
    },
    &amp;quot;NodeUUID&amp;quot;: &amp;quot;488789f9-38be-4eba-704a-79996382de41&amp;quot;,
    &amp;quot;TrackingID&amp;quot;: &amp;quot;f745fb1f59298a1773e35827adfa42dab4f469f9&amp;quot;,
    &amp;quot;UUID&amp;quot;: &amp;quot;ee29fc47f425d7a2e6de9379b0131f64a70fc991&amp;quot;
  }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;capture&#34;&gt;Capture&lt;/h2&gt;

&lt;p&gt;To create capture :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;POST /api/capture HTTP/1.1
Content-Type: application/json

{
  &amp;quot;GremlinQuery&amp;quot;:&amp;quot;g.V().Has(&#39;TID&#39;, &#39;de0cba34-5d96-5ce6-698a-dffd2e674f95&#39;)&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8

{
  &amp;quot;UUID&amp;quot;:&amp;quot;e2d9f084-4543-4f7e-6c2c-673f56ae4610&amp;quot;,
  &amp;quot;GremlinQuery&amp;quot;:&amp;quot;g.V().Has(&#39;TID&#39;, &#39;de0cba34-5d96-5ce6-698a-dffd2e674f95&#39;)&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To list captures :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;GET /api/capture HTTP/1.1
Content-Type: application/json
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;{
  &amp;quot;104fc114-e153-4f67-692a-60c636ee1597&amp;quot;:
  {
    &amp;quot;UUID&amp;quot;: &amp;quot;104fc114-e153-4f67-692a-60c636ee1597&amp;quot;
    &amp;quot;GremlinQuery&amp;quot;: &amp;quot;G.V().Has(&#39;TID&#39;, &#39;2108e074-feac-5a3c-60ca-5963e89c4059&#39;)&amp;quot;
    &amp;quot;Count&amp;quot;: 1
  },
  &amp;quot;e2d9f084-4543-4f7e-6c2c-673f56ae4610&amp;quot;:
  {
    &amp;quot;UUID&amp;quot;: &amp;quot;e2d9f084-4543-4f7e-6c2c-673f56ae4610&amp;quot;
    &amp;quot;GremlinQuery&amp;quot;: &amp;quot;g.V().Has(&#39;TID&#39;, &#39;de0cba34-5d96-5ce6-698a-dffd2e674f95&#39;)&amp;quot;
    &amp;quot;Count&amp;quot;: 1
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To delete a capture :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;DELETE /api/capture/7ca73f92-0547-475e-472d-d6e28664a117 HTTP/1.1
Content-Type: application/json
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Skydive Gremlin Query language</title>
      <link>//skydive-project.github.io/skydive/api/gremlin/</link>
      <pubDate>Wed, 22 Jun 2016 11:02:01 +0200</pubDate>
      
      <guid>//skydive-project.github.io/skydive/api/gremlin/</guid>
      <description>

&lt;h2 id=&#34;gremlin&#34;&gt;Gremlin&lt;/h2&gt;

&lt;p&gt;Skydive uses a subset of the
&lt;a href=&#34;https://en.wikipedia.org/wiki/Gremlin_(programming_language)&#34;&gt;Gremlin language&lt;/a&gt;
as query language for topology and flow requests.&lt;/p&gt;

&lt;p&gt;A Gremlin expression is a chain of steps that are evaluated from left to right.
In the context of Skydive nodes stand for interfaces, ports, bridges,
namespaces, etc. Links stand for any kind of relation between two nodes,
ownership(host), membership(containers), layer2, etc.&lt;/p&gt;

&lt;p&gt;The following expression will return all the OpenvSwitch ports belonging to
an OpenvSwitch bridge named &lt;code&gt;br-int&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;G.V().Has(&#39;Name&#39;, &#39;br-int&#39;, &#39;Type&#39;, &#39;ovsbridge&#39;).Out()

[
  {
    &amp;quot;Host&amp;quot;: &amp;quot;test&amp;quot;,
    &amp;quot;ID&amp;quot;: &amp;quot;feae10c1-240e-48e0-4a13-c608ffd15700&amp;quot;,
    &amp;quot;Metadata&amp;quot;: {
      &amp;quot;Name&amp;quot;: &amp;quot;vm2-eth0&amp;quot;,
      &amp;quot;Type&amp;quot;: &amp;quot;ovsport&amp;quot;,
      &amp;quot;UUID&amp;quot;: &amp;quot;f68f3593-68c4-4778-b47f-0ef291654fcf&amp;quot;
    }
  },
  {
    &amp;quot;Host&amp;quot;: &amp;quot;test&amp;quot;,
    &amp;quot;ID&amp;quot;: &amp;quot;ca909ccf-203d-457d-70b8-06fe308221ef&amp;quot;,
    &amp;quot;Metadata&amp;quot;: {
      &amp;quot;Name&amp;quot;: &amp;quot;br-int&amp;quot;,
      &amp;quot;Type&amp;quot;: &amp;quot;ovsport&amp;quot;,
      &amp;quot;UUID&amp;quot;: &amp;quot;e5b47010-f479-4def-b2d0-d55f5dbf7dad&amp;quot;
    }
  }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The query has to be read as :&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;G&lt;/code&gt; returns the topology Graph&lt;/li&gt;
&lt;li&gt;&lt;code&gt;V&lt;/code&gt; step returns all the nodes belonging the Graph&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Has&lt;/code&gt; step returns only the node with the given metadata attributes&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Out&lt;/code&gt; step returns outgoing nodes&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;traversal-steps&#34;&gt;Traversal steps&lt;/h2&gt;

&lt;p&gt;The Skydive implements a subset of the Gremlin language steps and adds
&amp;ldquo;network analysis&amp;rdquo; specific steps.&lt;/p&gt;

&lt;h3 id=&#34;v-step&#34;&gt;V Step&lt;/h3&gt;

&lt;p&gt;V step returns the nodes belonging to the graph.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;G.V()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A node ID can be passed to the V step which will return the corresponding node.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;G.V(&#39;ca909ccf-203d-457d-70b8-06fe308221efca909ccf-203d-457d-70b8-06fe308221ef&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;has-step&#34;&gt;Has Step&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Has&lt;/code&gt; step filters out the nodes that don&amp;rsquo;t match the given metadata list. &lt;code&gt;Has&lt;/code&gt;
can be applied either on nodes or edges.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;G.V().Has(&#39;Name&#39;: test, &#39;Type&#39;: &#39;netns&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;in-out-both-steps&#34;&gt;In/Out/Both steps&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;In/Out&lt;/code&gt; steps returns either incoming, outgoing or neighbor nodes of
previously selected nodes.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;G.V().Has(&#39;Name&#39;, &#39;br-int&#39;, &#39;Type&#39;, &#39;ovsbridge&#39;).Out()
G.V().Has(&#39;Name&#39;, &#39;br-int&#39;, &#39;Type&#39;, &#39;ovsbridge&#39;).In()
G.V().Has(&#39;Name&#39;, &#39;br-int&#39;, &#39;Type&#39;, &#39;ovsbridge&#39;).Both()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Filters can be applied to these steps in order to select only the nodes
corresponding to the given metadata. In that case the step will act as a couple
of steps &lt;code&gt;Out/Has&lt;/code&gt; for example.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;G.V().Has(&#39;Name&#39;, &#39;br-int&#39;, &#39;Type&#39;, &#39;ovsbridge&#39;).Out(&#39;Name&#39;, &#39;intf1&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ine-oute-steps&#34;&gt;InE/OutE steps&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;InE/OutE&lt;/code&gt; steps returns the incoming/ougoing links.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;G.V().Has(&#39;Name&#39;: &#39;test&#39;, &#39;Type&#39;: &#39;netns&#39;).InE()
G.V().Has(&#39;Name&#39;: &#39;test&#39;, &#39;Type&#39;: &#39;netns&#39;).OutE()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Like for the &lt;code&gt;In/Out/Both&lt;/code&gt; steps metadata list can be passed directly as
parameters in order to filter links.&lt;/p&gt;

&lt;h3 id=&#34;inv-outv-steps&#34;&gt;InV/OutV steps&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;InV/OutV&lt;/code&gt; steps returns incoming, outgoing nodes attached to the previously
selected links.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;G.V().OutE().Has(&#39;Type&#39;, &#39;layer2&#39;).InV()
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;dedup-step&#34;&gt;Dedup step&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Dedup&lt;/code&gt; removes duplicated nodes/links.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;G.V().Out().Both().Dedup()
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;count-step&#34;&gt;Count step&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Count&lt;/code&gt; returns the number of elements retrieved by the previous step.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;G.V().Count()
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;limit-step&#34;&gt;Limit step&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Limit&lt;/code&gt; limits the number of elements returned.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;g.Flows().Limit(1)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;shortestpathto-step&#34;&gt;ShortestPathTo step&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;ShortestPathTo&lt;/code&gt; step returns the shortest path to node matching the given
&lt;code&gt;Metadata&lt;/code&gt; predicate. This step returns a list of all the nodes traversed.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;G.V().Has(&#39;Type&#39;, &#39;netns&#39;).ShortestPathTo(Metadata(&#39;Type&#39;, &#39;host&#39;))

[
  [
    {
      &amp;quot;Host&amp;quot;: &amp;quot;test&amp;quot;,
      &amp;quot;ID&amp;quot;: &amp;quot;5221d3c3-3180-4a64-5337-f2f66b83ddd6&amp;quot;,
      &amp;quot;Metadata&amp;quot;: {
        &amp;quot;Name&amp;quot;: &amp;quot;vm1&amp;quot;,
        &amp;quot;Path&amp;quot;: &amp;quot;/var/run/netns/vm1&amp;quot;,
        &amp;quot;Type&amp;quot;: &amp;quot;netns&amp;quot;
      }
    },
    {
      &amp;quot;Host&amp;quot;: &amp;quot;test&amp;quot;,
      &amp;quot;ID&amp;quot;: &amp;quot;test&amp;quot;,
      &amp;quot;Metadata&amp;quot;: {
        &amp;quot;Name&amp;quot;: &amp;quot;pc48.home&amp;quot;,
        &amp;quot;Type&amp;quot;: &amp;quot;host&amp;quot;
      }
    }
  ]
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is possible to filter the link traversed according to the given &lt;code&gt;Metadata&lt;/code&gt;
predicate as a second parameter.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;G.V().Has(&#39;Type&#39;, &#39;netns&#39;).ShortestPathTo(Metadata(&#39;Type&#39;, &#39;host&#39;), Metadata(&#39;Type&#39;, &#39;layer2&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;graphpath-step&#34;&gt;GraphPath step&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;GraphPath&lt;/code&gt; step returns a path string corresponding to the reverse path
from the nodes to the host node they belong to.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;G.V().Has(&#39;Type&#39;, &#39;netns&#39;).GraphPath()

[
  &amp;quot;test[Type=host]/vm1[Type=netns]&amp;quot;
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The format of the path returned is the following:
&lt;code&gt;node_name[Type=node_type]/.../node_name[Type=node_type]&lt;/code&gt;`&lt;/p&gt;

&lt;h3 id=&#34;flows-step&#34;&gt;Flows step&lt;/h3&gt;

&lt;p&gt;Flows step returns flows of nodes where a capture has been started or of nodes
where the packets are coming from or going to.
The following Gremlin query returns the flows from the node &lt;code&gt;br-int&lt;/code&gt; where
an sFlow capture has been started.
See the &lt;a href=&#34;//skydive-project.github.io/skydive/getting-started/client/#flow-captures&#34;&gt;client section&lt;/a&gt;
in order to know how to start a capture from a Gremlin query.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;G.V().Has(&#39;Name&#39;, &#39;br-int&#39;).Flows()
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;flows-in-out-steps&#34;&gt;Flows In/Out steps&lt;/h3&gt;

&lt;p&gt;From a flow step it is possible to get the node from where the packets are
coming or the node where packets are going to. Node steps are of course
applicable after &lt;code&gt;In/Out&lt;/code&gt; flow steps.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;G.V().Has(&#39;Name&#39;, &#39;br-int&#39;).Flows().In()
G.V().Has(&#39;Name&#39;, &#39;br-int&#39;).Flows().Out()
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;flows-has-step&#34;&gt;Flows Has step&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Has&lt;/code&gt; step filters out the flows that don&amp;rsquo;t match the given attributes list.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;G.Flows().Has(&#39;Network.A&#39;, &#39;192.168.0.1&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Key can be any attributes of the Flow data structure :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;UUID&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TrackingID&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NodeUUID&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ANodeUUID&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BNodeUUID&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LayersPath&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Link.A&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Link.B&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Link.Protocol&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Network.A&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Network.B&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Network.Protocol&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Transport.A&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Transport.B&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Transport.Protocol&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Metric.ABBytes&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Metric.BABytes&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Metric.ABPackets&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Metric.BAPackets&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Metric.Start&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Metric.Last&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lt, Lte, Gt, Gte predicates can be used on numerical fields.
See &lt;a href=&#34;//skydive-project.github.io/skydive/api/flows/&#34;&gt;Flow Schema&lt;/a&gt; for further explanations.&lt;/p&gt;

&lt;h3 id=&#34;predicates&#34;&gt;Predicates&lt;/h3&gt;

&lt;p&gt;Predicates can be used with &lt;code&gt;Has&lt;/code&gt;, &lt;code&gt;In*&lt;/code&gt;, &lt;code&gt;Out*&lt;/code&gt; steps.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NE&lt;/code&gt;, matches graph elements for which metadata don&amp;rsquo;t match specified values&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;G.V().Has(&#39;Type&#39;, NE(&#39;ovsbridge&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Within&lt;/code&gt;, matches graph elements for which metadata values match one member of
the given array.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;G.V().Has(&#39;Type&#39;, Within(&#39;ovsbridge&#39;, &#39;ovsport&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Without&lt;/code&gt;, matches graph elements for which metadata values don&amp;rsquo;t match any of
the members of the given array.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;G.V().Has(&#39;Type&#39;, Without(&#39;ovsbridge&#39;, &#39;ovsport&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Regex&lt;/code&gt;, matches graph elements for which metadata matches the given regular
expression.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;G.V().Has(&#39;Name&#39;, Regex(&#39;tap-&#39;))
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>How to deploy Skydive with kubernetes</title>
      <link>//skydive-project.github.io/skydive/getting-started/kubernetes/</link>
      <pubDate>Sat, 14 May 2016 11:02:01 +0200</pubDate>
      
      <guid>//skydive-project.github.io/skydive/getting-started/kubernetes/</guid>
      <description>

&lt;h2 id=&#34;kubernetes-deployment&#34;&gt;Kubernetes deployment&lt;/h2&gt;

&lt;p&gt;Skydive provides a Kubernetes
&lt;a href=&#34;https://github.com/skydive-project/skydive/blob/master/contrib/kubernetes/skydive.yaml&#34;&gt;file&lt;/a&gt;
which can be used to deploy Skydive. It will deploy an Elasticsearch,
a Skydive analyzer and Skydive Agent on each Kubernetes nodes. Once you will
have Skydive deployment on top on your Kubernetes cluster you will be able to
monitor, capture, troubleshoot your container networking stack.&lt;/p&gt;

&lt;p&gt;A skydive Analyzer &lt;a href=&#34;http://kubernetes.io/docs/user-guide/services/&#34;&gt;Kubernetes service&lt;/a&gt;
is created and exposes ports for Elasticsearch and the Analyzer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Elasticsearch: 9200&lt;/li&gt;
&lt;li&gt;Analyzer: 8082&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://kubernetes.io/docs/admin/daemons/&#34;&gt;Kubernetes DaemonSet&lt;/a&gt; is used for
Agents in order to have one Agent per node.&lt;/p&gt;

&lt;h2 id=&#34;creation&#34;&gt;Creation&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;kubectl create -f skydive.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you have your environment set up, going to the Analyzer service
should show similar to the following capture.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//skydive-project.github.io/skydive/images/kubernetes-two-nodes.png&#34; alt=&#34;WebUI Capture&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>//skydive-project.github.io/skydive/contact/</link>
      <pubDate>Fri, 06 May 2016 11:03:48 +0200</pubDate>
      
      <guid>//skydive-project.github.io/skydive/contact/</guid>
      <description>

&lt;h2 id=&#34;irc&#34;&gt;IRC&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;#skydive-project on irc.freenode.net&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;mailing-list&#34;&gt;Mailing list&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.redhat.com/mailman/listinfo/skydive-dev&#34;&gt;https://www.redhat.com/mailman/listinfo/skydive-dev&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Contributing</title>
      <link>//skydive-project.github.io/skydive/contributing/</link>
      <pubDate>Fri, 06 May 2016 11:02:01 +0200</pubDate>
      
      <guid>//skydive-project.github.io/skydive/contributing/</guid>
      <description>

&lt;p&gt;This project accepts contributions. Skydive uses the Gerrit workflow
through Software Factory.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://softwarefactory-project.io/r/#/q/project:skydive&#34;&gt;http://softwarefactory-project.io/r/#/q/project:skydive&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;setting-up-your-environment&#34;&gt;Setting up your environment&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;git clone https://softwarefactory-project.io/r/skydive
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;git-review installation :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;yum install git-review
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;apt-get install git-review
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or to get the latest version&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo pip install git-review
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;starting-a-change&#34;&gt;Starting a Change&lt;/h2&gt;

&lt;p&gt;Create a topic branch :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;git checkout -b TOPIC-BRANCH
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Submit your change :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;git review
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Updating your Change :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;git commit -a --amend
git review
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For a more complete documentation about
&lt;a href=&#34;https://gerrit-documentation.storage.googleapis.com/Documentation/2.12/intro-quick.html#_the_life_and_times_of_a_change&#34;&gt;how to contribute to a gerrit hosted project&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to deploy Skydive with Devstack</title>
      <link>//skydive-project.github.io/skydive/getting-started/openstack/</link>
      <pubDate>Fri, 06 May 2016 11:02:01 +0200</pubDate>
      
      <guid>//skydive-project.github.io/skydive/getting-started/openstack/</guid>
      <description>

&lt;h2 id=&#34;devstack-plugin&#34;&gt;Devstack plugin&lt;/h2&gt;

&lt;p&gt;Skydive provides a DevStack plugin that can be used in order to have
Skydive Agents/Analyzer set up with the proper probes
by DevStack.&lt;/p&gt;

&lt;p&gt;For a single node setup adding the following lines to your local.conf file
should be enough.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;enable_plugin skydive https://github.com/skydive-project/skydive.git

enable_service skydive-agent skydive-analyzer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The plugin accepts the following parameters:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;# Address on which skydive analyzer process listens for connections.
# Must be in ip:port format
#SKYDIVE_ANALYZER_LISTEN=

# Inform the agent about the address on which analyzers are listening
# Must be in ip:port format
#SKYDIVE_AGENT_ANALYZERS=

# ip:port address on which skydive agent listens for connections.
#SKYDIVE_AGENT_LISTEN=

# Configure the skydive agent with the etcd server address
# http://IP_ADDRESS:2379
#SKYDIVE_AGENT_ETCD=

# The path for the generated skydive configuration file
#SKYDIVE_CONFIG_FILE=

# List of agent probes to be used by the agent
# Ex: netns netlink ovsdb
#SKYDIVE_AGENT_PROBES=

# Remote port for ovsdb server.
#SKYDIVE_OVSDB_REMOTE_PORT=6640

# Set the default log level, default: INFO
#SKYDIVE_LOGLEVEL=DEBUG
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;the-classical-two-nodes-deployment&#34;&gt;The classical two nodes deployment&lt;/h2&gt;

&lt;p&gt;Inside the Devstack folder of the Skydive sources there are two local.conf files
that can be used in order to deployment two Devstack with Skydive. The first
file will install a full Devstack with Skydive analyzer and agent. The second
one will install a compute Devstack with only the skydive agent.&lt;/p&gt;

&lt;p&gt;Skydive will be set with the probes for OpenvSwitch and Neutron. It will be set
to use Keystone as authentication mechanism, so the credentials will be the same
than the admin.&lt;/p&gt;

&lt;p&gt;Once you have your environment set up, going to the Analyzer Web Interface
should show similar to the following capture.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//skydive-project.github.io/skydive/images/devstack-two-nodes.png&#34; alt=&#34;WebUI Capture&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;capture-traffic&#34;&gt;Capture traffic&lt;/h2&gt;

&lt;p&gt;Now we have our two nodes up and running we may want to start capturing
packets. The following command can be used in order to start a capture on all
the &lt;code&gt;br-int&lt;/code&gt; bridges.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ export SKYDIVE_USERNAME=admin
$ export SKYDIVE_PASSWORD=password

$ skydive client capture create --gremlin &amp;quot;G.V().Has(&#39;Name&#39;, &#39;br-int&#39;)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ skydive client -c /tmp/skydive.yaml capture list
{
  &amp;quot;d62b3176-ebc8-44ed-7001-191270dc4d76&amp;quot;: {
    &amp;quot;UUID&amp;quot;: &amp;quot;d62b3176-ebc8-44ed-7001-191270dc4d76&amp;quot;,
    &amp;quot;GremlinQuery&amp;quot;: &amp;quot;G.V().Has(&#39;Name&#39;, &#39;br-int&#39;)&amp;quot;,
    &amp;quot;Count&amp;quot;: 1
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To get Flows captured :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;skydive client topology query --gremlin &amp;quot;G.Flows()&amp;quot;
[
  {
    &amp;quot;ANodeUUID&amp;quot;: &amp;quot;422190f1-bbde-4eb0-4849-1fd1209229fe&amp;quot;,
    &amp;quot;BNodeUUID&amp;quot;: &amp;quot;f3f1256b-7097-487c-7a02-38a32e009b3c&amp;quot;,
    &amp;quot;LastUpdateMetric&amp;quot;: {
      &amp;quot;ABBytes&amp;quot;: 490,
      &amp;quot;ABPackets&amp;quot;: 5,
      &amp;quot;BABytes&amp;quot;: 490,
      &amp;quot;BAPackets&amp;quot;: 5,
      &amp;quot;Last&amp;quot;: 1477567166,
      &amp;quot;Start&amp;quot;: 1477567161
    },
    &amp;quot;LayersPath&amp;quot;: &amp;quot;Ethernet/IPv4/ICMPv4/Payload&amp;quot;,
    &amp;quot;Link&amp;quot;: {
      &amp;quot;A&amp;quot;: &amp;quot;02:48:4f:c4:40:99&amp;quot;,
      &amp;quot;B&amp;quot;: &amp;quot;e2:d0:f0:61:e7:81&amp;quot;,
      &amp;quot;Protocol&amp;quot;: &amp;quot;ETHERNET&amp;quot;
    },
    &amp;quot;Metric&amp;quot;: {
      &amp;quot;ABBytes&amp;quot;: 364560,
      &amp;quot;ABPackets&amp;quot;: 3720,
      &amp;quot;BABytes&amp;quot;: 364560,
      &amp;quot;BAPackets&amp;quot;: 3720,
      &amp;quot;Last&amp;quot;: 1477567165,
      &amp;quot;Start&amp;quot;: 1477563444
    },
    &amp;quot;Network&amp;quot;: {
      &amp;quot;A&amp;quot;: &amp;quot;192.168.0.1&amp;quot;,
      &amp;quot;B&amp;quot;: &amp;quot;192.168.0.2&amp;quot;,
      &amp;quot;Protocol&amp;quot;: &amp;quot;IPV4&amp;quot;
    },
    &amp;quot;NodeUUID&amp;quot;: &amp;quot;f3f1256b-7097-487c-7a02-38a32e009b3c&amp;quot;,
    &amp;quot;TrackingID&amp;quot;: &amp;quot;f745fb1f59298a1773e35827adfa42dab4f469f9&amp;quot;,
    &amp;quot;UUID&amp;quot;: &amp;quot;caa24da240cb3b40c84ebb708e2e5dcbe3c54784&amp;quot;
  }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For a complete description of the flow structure can be found
&lt;a href=&#34;//skydive-project.github.io/skydive/api/flows/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to deploy Skydive with Docker</title>
      <link>//skydive-project.github.io/skydive/getting-started/docker/</link>
      <pubDate>Fri, 06 May 2016 11:02:01 +0200</pubDate>
      
      <guid>//skydive-project.github.io/skydive/getting-started/docker/</guid>
      <description>

&lt;h2 id=&#34;docker&#34;&gt;Docker&lt;/h2&gt;

&lt;p&gt;A Docker image is available on the &lt;a href=&#34;https://hub.docker.com/r/skydive/&#34;&gt;Skydive Docker Hub account&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To start the analyzer :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;docker run -p 8082:8082 -p 2379:2379 skydive/skydive analyzer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To start the agent :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;docker run --privileged --pid=host --net=host -p 8081:8081 -v /var/run/docker.sock:/var/run/docker.sock skydive/skydive agent
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;docker-compose&#34;&gt;Docker Compose&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;Docker Compose&lt;/a&gt; can also be used to automatically start
an Elasticsearch container, a Skydive analyzer container and a Skydive agent container. The service
definition is located in the &lt;code&gt;contrib/docker&lt;/code&gt; folder of the Skydive sources.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;docker-compose up
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Installation</title>
      <link>//skydive-project.github.io/skydive/getting-started/install/</link>
      <pubDate>Fri, 06 May 2016 11:02:01 +0200</pubDate>
      
      <guid>//skydive-project.github.io/skydive/getting-started/install/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Skydive relies on two main components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;skydive agent, has to be started on each node where the topology and flows
informations will be captured&lt;/li&gt;
&lt;li&gt;skydive analyzer, the node collecting data captured by the agents&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;dependencies&#34;&gt;Dependencies&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Go &amp;gt;= 1.5&lt;/li&gt;
&lt;li&gt;Elasticsearch &amp;gt;= 2.0&lt;/li&gt;
&lt;li&gt;libpcap&lt;/li&gt;
&lt;li&gt;libxml2&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;install&#34;&gt;Install&lt;/h2&gt;

&lt;p&gt;Make sure you have a working Go environment. &lt;a href=&#34;http://golang.org/doc/install.html&#34;&gt;See the install instructions&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ mkdir -p $GOPATH/src/github.com/skydive-project
$ git clone https://github.com/skydive-project/skydive.git $GOPATH/src/github.com/skydive-project/skydive
$ cd $GOPATH/src/github.com/skydive-project/skydive
$ make install
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;

&lt;p&gt;For a single node setup, the configuration file is optional. For a multiple
node setup, the analyzer IP/PORT need to be adapted.&lt;/p&gt;

&lt;p&gt;Processes are bound to 127.0.0.1 by default, you can explicitly change binding
address with &amp;ldquo;listen: 0.0.0.0:port&amp;rdquo; in the proper configuration sections.&lt;/p&gt;

&lt;p&gt;User can add host metadata to specify an extra host information in
&amp;ldquo;agent.metadata&amp;rdquo; configuration section. All the key value pairs given
under this configuration section will be added to host metadata.&lt;/p&gt;

&lt;p&gt;See the full list of configuration parameters in the sample configuration file
&lt;a href=&#34;https://github.com/skydive-project/skydive/blob/master/etc/skydive.yml.default&#34;&gt;etc/skydive.yml.default&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;start&#34;&gt;Start&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ skydive agent [--conf etc/skydive.yml]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ skydive analyzer [--conf etc/skydive.yml]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;all-in-one&#34;&gt;All-in-one&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;all-in-one&lt;/code&gt; mode can be used to start an Agent and an Analyzer at once.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ skydive allinone [--conf etc/skydive.yml]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Skydive client, API &amp; WebUI</title>
      <link>//skydive-project.github.io/skydive/getting-started/client/</link>
      <pubDate>Fri, 06 May 2016 11:02:01 +0200</pubDate>
      
      <guid>//skydive-project.github.io/skydive/getting-started/client/</guid>
      <description>

&lt;h2 id=&#34;client&#34;&gt;Client&lt;/h2&gt;

&lt;p&gt;Skydive client can be used to interact with Skydive Analyzer and Agents.
Running it without any command will return all the commands available.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ skydive client

Usage:
  skydive client [command]

Available Commands:
  alert       Manage alerts
  capture     Manage captures

Flags:
  -h, --help[=false]: help for client
      --password=&amp;quot;&amp;quot;: password auth parameter
      --username=&amp;quot;&amp;quot;: username auth parameter
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Specifying the subcommand will give the usage of the subcommand.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ skydive client capture
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If an authentication mechanism is defined in the configuration file the username
and password parameter have to be used for each command. Environment variables
SKYDIVE_USERNAME and SKYDIVE_PASSWORD can be used as default value for the
username/password command line parameters.&lt;/p&gt;

&lt;h2 id=&#34;webui&#34;&gt;WebUI&lt;/h2&gt;

&lt;p&gt;To access to the WebUI of agents or analyzer:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;http://&amp;lt;address&amp;gt;:&amp;lt;port&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;topology-requests&#34;&gt;Topology requests&lt;/h2&gt;

&lt;p&gt;Skydive uses the Gremlin traversal language as a topology request language.
Requests on the topology can be done as following :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ skydive client topology query --gremlin &amp;quot;G.V().Has(&#39;Name&#39;, &#39;br-int&#39;, &#39;Type&#39; ,&#39;ovsbridge&#39;)&amp;quot;
[
  {
    &amp;quot;Host&amp;quot;: &amp;quot;pc48.home&amp;quot;,
    &amp;quot;ID&amp;quot;: &amp;quot;1e4fc503-312c-4e4f-4bf5-26263ce82e0b&amp;quot;,
    &amp;quot;Metadata&amp;quot;: {
      &amp;quot;Name&amp;quot;: &amp;quot;br-int&amp;quot;,
      &amp;quot;Type&amp;quot;: &amp;quot;ovsbridge&amp;quot;,
      &amp;quot;UUID&amp;quot;: &amp;quot;c80cf5a7-998b-49ca-b2b2-7a1d050facc8&amp;quot;
    }
  }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Refer to the &lt;a href=&#34;//skydive-project.github.io/skydive/api/gremlin/&#34;&gt;Gremlin section&lt;/a&gt; for further
explanations about the syntax and the functions available.&lt;/p&gt;

&lt;h2 id=&#34;flow-captures&#34;&gt;Flow captures&lt;/h2&gt;

&lt;p&gt;Flow captures can be started from the WebUI or thanks to the Skydive client.
Skydive leverages the Gremlin language in order to select nodes on which a
capture will be started. The gremlin expression is continuously evaluated which
means that it is possible to define a capture on nodes that don&amp;rsquo;t exist yet.
It useful when you want to start a capture on all OpenvSwitch whatever the
number of Skydive agents you will start.&lt;/p&gt;

&lt;p&gt;The following command start a capture on all docker0 interfaces&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ skydive client capture create --gremlin &amp;quot;G.V().Has(&#39;Name&#39;, &#39;docker0&#39;)&amp;quot;

{
  &amp;quot;UUID&amp;quot;: &amp;quot;76de5697-106a-4f50-7455-47c2fa7a964f&amp;quot;,
  &amp;quot;GremlinQuery&amp;quot;: &amp;quot;G.V().Has(&#39;Name&#39;, &#39;docker0&#39;)&amp;quot;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While starting the capture, you can specify the capture name,
capture description and capture type optionally.
In order to know the list of supported capture types, see the usage doc of flow capture.&lt;/p&gt;

&lt;p&gt;Node types that support captures are :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ovsbridge&lt;/li&gt;
&lt;li&gt;veth&lt;/li&gt;
&lt;li&gt;device&lt;/li&gt;
&lt;li&gt;internal&lt;/li&gt;
&lt;li&gt;tun&lt;/li&gt;
&lt;li&gt;bridge&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To delete a capture :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ skydive client capture delete &amp;lt;capture UUID&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Flows Gremlin step can be used in order to see the flows captured. See the
&lt;a href=&#34;//skydive-project.github.io/skydive/getting-started/gremlin/&#34;&gt;Gremlin section&lt;/a&gt; for further explanations.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;skydive client topology query --gremlin &amp;quot;G.V().Has(&#39;Name&#39;, &#39;docker0&#39;).Flows()&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>API</title>
      <link>//skydive-project.github.io/skydive/api/</link>
      <pubDate>Wed, 04 May 2016 17:48:22 +0200</pubDate>
      
      <guid>//skydive-project.github.io/skydive/api/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Getting started</title>
      <link>//skydive-project.github.io/skydive/getting-started/</link>
      <pubDate>Wed, 04 May 2016 17:48:22 +0200</pubDate>
      
      <guid>//skydive-project.github.io/skydive/getting-started/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>//skydive-project.github.io/skydive/</link>
      <pubDate>Wed, 04 May 2016 17:48:22 +0200</pubDate>
      
      <guid>//skydive-project.github.io/skydive/</guid>
      <description>

&lt;p&gt;Skydive is an open source real-time network topology and protocols analyzer.
It aims to provide a comprehensive way of understanding what is happening in
the network infrastructure.&lt;/p&gt;

&lt;p&gt;Skydive agents collect topology informations and flows and forward them to a
central agent for further analysis. All the informations are stored in an
Elasticsearch database.&lt;/p&gt;

&lt;p&gt;Skydive is SDN-agnostic but provides SDN drivers in order to enhance the
topology and flows informations.&lt;/p&gt;

&lt;h2 id=&#34;topology-probes-supported&#34;&gt;Topology Probes supported&lt;/h2&gt;

&lt;p&gt;Topology probes currently implemented:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;OVSDB&lt;/li&gt;
&lt;li&gt;NetLINK&lt;/li&gt;
&lt;li&gt;NetNS&lt;/li&gt;
&lt;li&gt;Ethtool&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Topology connectors:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Neutron&lt;/li&gt;
&lt;li&gt;Docker&lt;/li&gt;
&lt;li&gt;Opencontrail&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;flow-probes-supported&#34;&gt;Flow Probes supported&lt;/h2&gt;

&lt;p&gt;Flow probes currently implemented:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;sFlow&lt;/li&gt;
&lt;li&gt;PCAP&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>License</title>
      <link>//skydive-project.github.io/skydive/license/</link>
      <pubDate>Wed, 04 May 2016 17:28:04 +0200</pubDate>
      
      <guid>//skydive-project.github.io/skydive/license/</guid>
      <description>&lt;p&gt;Apache License
                           Version 2.0, January 2004
                        &lt;a href=&#34;http://www.apache.org/licenses/&#34;&gt;http://www.apache.org/licenses/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Definitions.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;License&amp;rdquo; shall mean the terms and conditions for use, reproduction,
  and distribution as defined by Sections 1 through 9 of this document.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Licensor&amp;rdquo; shall mean the copyright owner or entity authorized by
  the copyright owner that is granting the License.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Legal Entity&amp;rdquo; shall mean the union of the acting entity and all
  other entities that control, are controlled by, or are under common
  control with that entity. For the purposes of this definition,
  &amp;ldquo;control&amp;rdquo; means (i) the power, direct or indirect, to cause the
  direction or management of such entity, whether by contract or
  otherwise, or (ii) ownership of fifty percent (50%) or more of the
  outstanding shares, or (iii) beneficial ownership of such entity.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;You&amp;rdquo; (or &amp;ldquo;Your&amp;rdquo;) shall mean an individual or Legal Entity
  exercising permissions granted by this License.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Source&amp;rdquo; form shall mean the preferred form for making modifications,
  including but not limited to software source code, documentation
  source, and configuration files.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Object&amp;rdquo; form shall mean any form resulting from mechanical
  transformation or translation of a Source form, including but
  not limited to compiled object code, generated documentation,
  and conversions to other media types.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Work&amp;rdquo; shall mean the work of authorship, whether in Source or
  Object form, made available under the License, as indicated by a
  copyright notice that is included in or attached to the work
  (an example is provided in the Appendix below).&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Derivative Works&amp;rdquo; shall mean any work, whether in Source or Object
  form, that is based on (or derived from) the Work and for which the
  editorial revisions, annotations, elaborations, or other modifications
  represent, as a whole, an original work of authorship. For the purposes
  of this License, Derivative Works shall not include works that remain
  separable from, or merely link (or bind by name) to the interfaces of,
  the Work and Derivative Works thereof.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Contribution&amp;rdquo; shall mean any work of authorship, including
  the original version of the Work and any modifications or additions
  to that Work or Derivative Works thereof, that is intentionally
  submitted to Licensor for inclusion in the Work by the copyright owner
  or by an individual or Legal Entity authorized to submit on behalf of
  the copyright owner. For the purposes of this definition, &amp;ldquo;submitted&amp;rdquo;
  means any form of electronic, verbal, or written communication sent
  to the Licensor or its representatives, including but not limited to
  communication on electronic mailing lists, source code control systems,
  and issue tracking systems that are managed by, or on behalf of, the
  Licensor for the purpose of discussing and improving the Work, but
  excluding communication that is conspicuously marked or otherwise
  designated in writing by the copyright owner as &amp;ldquo;Not a Contribution.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Contributor&amp;rdquo; shall mean Licensor and any individual or Legal Entity
  on behalf of whom a Contribution has been received by Licensor and
  subsequently incorporated within the Work.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Grant of Copyright License. Subject to the terms and conditions of
  this License, each Contributor hereby grants to You a perpetual,
  worldwide, non-exclusive, no-charge, royalty-free, irrevocable
  copyright license to reproduce, prepare Derivative Works of,
  publicly display, publicly perform, sublicense, and distribute the
  Work and such Derivative Works in Source or Object form.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Grant of Patent License. Subject to the terms and conditions of
  this License, each Contributor hereby grants to You a perpetual,
  worldwide, non-exclusive, no-charge, royalty-free, irrevocable
  (except as stated in this section) patent license to make, have made,
  use, offer to sell, sell, import, and otherwise transfer the Work,
  where such license applies only to those patent claims licensable
  by such Contributor that are necessarily infringed by their
  Contribution(s) alone or by combination of their Contribution(s)
  with the Work to which such Contribution(s) was submitted. If You
  institute patent litigation against any entity (including a
  cross-claim or counterclaim in a lawsuit) alleging that the Work
  or a Contribution incorporated within the Work constitutes direct
  or contributory patent infringement, then any patent licenses
  granted to You under this License for that Work shall terminate
  as of the date such litigation is filed.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Redistribution. You may reproduce and distribute copies of the
  Work or Derivative Works thereof in any medium, with or without
  modifications, and in Source or Object form, provided that You
  meet the following conditions:&lt;/p&gt;

&lt;p&gt;(a) You must give any other recipients of the Work or
      Derivative Works a copy of this License; and&lt;/p&gt;

&lt;p&gt;(b) You must cause any modified files to carry prominent notices
      stating that You changed the files; and&lt;/p&gt;

&lt;p&gt;&amp;copy; You must retain, in the Source form of any Derivative Works
      that You distribute, all copyright, patent, trademark, and
      attribution notices from the Source form of the Work,
      excluding those notices that do not pertain to any part of
      the Derivative Works; and&lt;/p&gt;

&lt;p&gt;(d) If the Work includes a &amp;ldquo;NOTICE&amp;rdquo; text file as part of its
      distribution, then any Derivative Works that You distribute must
      include a readable copy of the attribution notices contained
      within such NOTICE file, excluding those notices that do not
      pertain to any part of the Derivative Works, in at least one
      of the following places: within a NOTICE text file distributed
      as part of the Derivative Works; within the Source form or
      documentation, if provided along with the Derivative Works; or,
      within a display generated by the Derivative Works, if and
      wherever such third-party notices normally appear. The contents
      of the NOTICE file are for informational purposes only and
      do not modify the License. You may add Your own attribution
      notices within Derivative Works that You distribute, alongside
      or as an addendum to the NOTICE text from the Work, provided
      that such additional attribution notices cannot be construed
      as modifying the License.&lt;/p&gt;

&lt;p&gt;You may add Your own copyright statement to Your modifications and
  may provide additional or different license terms and conditions
  for use, reproduction, or distribution of Your modifications, or
  for any such Derivative Works as a whole, provided Your use,
  reproduction, and distribution of the Work otherwise complies with
  the conditions stated in this License.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Submission of Contributions. Unless You explicitly state otherwise,
  any Contribution intentionally submitted for inclusion in the Work
  by You to the Licensor shall be under the terms and conditions of
  this License, without any additional terms or conditions.
  Notwithstanding the above, nothing herein shall supersede or modify
  the terms of any separate license agreement you may have executed
  with Licensor regarding such Contributions.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Trademarks. This License does not grant permission to use the trade
  names, trademarks, service marks, or product names of the Licensor,
  except as required for reasonable and customary use in describing the
  origin of the Work and reproducing the content of the NOTICE file.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Disclaimer of Warranty. Unless required by applicable law or
  agreed to in writing, Licensor provides the Work (and each
  Contributor provides its Contributions) on an &amp;ldquo;AS IS&amp;rdquo; BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
  implied, including, without limitation, any warranties or conditions
  of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
  PARTICULAR PURPOSE. You are solely responsible for determining the
  appropriateness of using or redistributing the Work and assume any
  risks associated with Your exercise of permissions under this License.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Limitation of Liability. In no event and under no legal theory,
  whether in tort (including negligence), contract, or otherwise,
  unless required by applicable law (such as deliberate and grossly
  negligent acts) or agreed to in writing, shall any Contributor be
  liable to You for damages, including any direct, indirect, special,
  incidental, or consequential damages of any character arising as a
  result of this License or out of the use or inability to use the
  Work (including but not limited to damages for loss of goodwill,
  work stoppage, computer failure or malfunction, or any and all
  other commercial damages or losses), even if such Contributor
  has been advised of the possibility of such damages.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Accepting Warranty or Additional Liability. While redistributing
  the Work or Derivative Works thereof, You may choose to offer,
  and charge a fee for, acceptance of support, warranty, indemnity,
  or other liability obligations and/or rights consistent with this
  License. However, in accepting such obligations, You may act only
  on Your own behalf and on Your sole responsibility, not on behalf
  of any other Contributor, and only if You agree to indemnify,
  defend, and hold each Contributor harmless for any liability
  incurred by, or claims asserted against, such Contributor by reason
  of your accepting any such warranty or additional liability.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>