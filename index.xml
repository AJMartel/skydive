<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Skydive Docs</title>
    <link>//skydive-project.github.io/skydive/</link>
    <description>Recent content on Skydive Docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 05 Jan 2017 11:44:01 +0200</lastBuildDate>
    <atom:link href="//skydive-project.github.io/skydive/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Captures</title>
      <link>//skydive-project.github.io/skydive/api/captures/</link>
      <pubDate>Thu, 05 Jan 2017 11:44:01 +0200</pubDate>
      
      <guid>//skydive-project.github.io/skydive/api/captures/</guid>
      <description>

&lt;p&gt;Flow captures can be started from the WebUI or thanks to the &lt;a href=&#34;//skydive-project.github.io/skydive/getting-started/client&#34;&gt;Skydive client&lt;/a&gt;.
Skydive leverages the &lt;a href=&#34;//skydive-project.github.io/skydive/api/gremlin/&#34;&gt;Gremlin language&lt;/a&gt; in order to select nodes on which a
capture will be started. The Gremlin expression is continuously evaluated which
means that it is possible to define a capture on nodes that do not exist yet.
It useful when you want to start a capture on all OpenvSwitch whatever the
number of Skydive agents you will start.&lt;/p&gt;

&lt;p&gt;While starting the capture, you can specify the capture name,
capture description and capture type optionally.&lt;/p&gt;

&lt;p&gt;At this time, the following capture types are supported:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ovssflow&lt;/code&gt;, for interfaces managed by OpenvSwitch such as OVS bridges&lt;/li&gt;
&lt;li&gt;&lt;code&gt;afpacket&lt;/code&gt;, for interfaces suchs as Linux bridges, veth, devices, &amp;hellip;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pcap&lt;/code&gt;, same as &lt;code&gt;afpacket&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pcapsocket&lt;/code&gt;. This capture type allows you to inject traffic from a PCAP file.
See &lt;a href=&#34;//skydive-project.github.io/skydive/api/captures#pcap-files&#34;&gt;below&lt;/a&gt; for more information.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Node types that support captures are :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ovsbridge&lt;/li&gt;
&lt;li&gt;veth&lt;/li&gt;
&lt;li&gt;device&lt;/li&gt;
&lt;li&gt;internal&lt;/li&gt;
&lt;li&gt;tun&lt;/li&gt;
&lt;li&gt;bridge&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;pcap-files&#34;&gt;PCAP files&lt;/h3&gt;

&lt;p&gt;If the flow probe &lt;code&gt;pcapsocket&lt;/code&gt; is enabled, you can create captures with the
type &lt;code&gt;pcapsocket&lt;/code&gt;. Skydive will create a TCP socket where you can copy PCAP
files (using &lt;code&gt;nc&lt;/code&gt; for instance). Traffic injected into this socket will have
its capture point set to the selected node. The TCP socket address can be
retrieved using the &lt;code&gt;PCAPSocket&lt;/code&gt; attribute of the node or using the
&lt;code&gt;PCAPSocket&lt;/code&gt; attribute of the capture.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>vagrant</title>
      <link>//skydive-project.github.io/skydive/getting-started/vagrant/</link>
      <pubDate>Mon, 28 Nov 2016 15:21:44 +0100</pubDate>
      
      <guid>//skydive-project.github.io/skydive/getting-started/vagrant/</guid>
      <description>

&lt;h2 id=&#34;vagrant-deployment&#34;&gt;Vagrant deployment&lt;/h2&gt;

&lt;p&gt;You can use Vagrant to deploy a Skydive environment with one virtual machine
running both Skydive analyzer and Elasticsearch, and two virtual machines with the
Skydive agent. This &lt;code&gt;Vagrantfile&lt;/code&gt;, hosted in &lt;code&gt;contrib/vagrant&lt;/code&gt; of the Git
repository, makes use of the
&lt;a href=&#34;https://github.com/vagrant-libvirt/vagrant-libvirt&#34;&gt;libvirt Vagrant provider&lt;/a&gt;
and uses Fedora as the box image.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;cd contrib/vagrant
vagrant up
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Deployment</title>
      <link>//skydive-project.github.io/skydive/deployment/</link>
      <pubDate>Wed, 23 Nov 2016 01:07:31 +0000</pubDate>
      
      <guid>//skydive-project.github.io/skydive/deployment/</guid>
      <description>

&lt;h2 id=&#34;configuration-file&#34;&gt;Configuration file&lt;/h2&gt;

&lt;p&gt;Skydive is based on an unique binary and configuration file for the Agent and Analyzer.
Each Agent and Analyzer have his own section.&lt;/p&gt;

&lt;p&gt;A configuration example can be found (here)[&lt;a href=&#34;https://github.com/skydive-project/skydive/blob/master/etc/skydive.yml.default&#34;&gt;https://github.com/skydive-project/skydive/blob/master/etc/skydive.yml.default&lt;/a&gt;]&lt;/p&gt;

&lt;h2 id=&#34;security&#34;&gt;Security&lt;/h2&gt;

&lt;p&gt;To secure communication between Agent(s) and Analyzer, Skydive relies on TLS communication with strict cross validation.
TLS communication can be enabled by defining X509 certificates in their respective section in the configuration file, like :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;analyzer:
  X509_cert: /etc/ssl/certs/analyzer.domain.com.crt
  X509_key:  /etc/ssl/certs/analyzer.domain.com.key

agent:
  X509_cert: /etc/ssl/certs/agent.domain.com.crt
  X509_key:  /etc/ssl/certs/agent.domain.com.key
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;generate-the-certificates&#34;&gt;Generate the certificates&lt;/h3&gt;

&lt;h3 id=&#34;certificate-signing-request-csr&#34;&gt;Certificate Signing Request (CSR)&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;openssl genrsa -out analyzer/analyzer.domain.com.key 2048
chmod 400 analyzer/analyzer.domain.com.key
openssl req -new -key analyzer/analyzer.domain.com.key -out analyzer/analyzer.domain.com.csr -subj &amp;quot;/CN=skydive-analyzer&amp;quot; -config skydive-openssl.cnf
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;analyzer-server-certificate-crt&#34;&gt;Analyzer (Server certificate CRT)&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;yes &#39;&#39; | openssl x509 -req -days 365  -signkey analyzer/analyzer.domain.com.key -in analyzer/analyzer.domain.com.csr -out analyzer/analyzer.domain.com.crt -extfile skydive-openssl.cnf -extensions v3_req
chmod 444 analyzer/analyzer.domain.com.crt
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;agent-client-certificate-crt&#34;&gt;Agent (Client certificate CRT)&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;openssl genrsa -out agent/agent.domain.com.key 2048
chmod 400 agent/agent.domain.com.key
yes &#39;&#39; | openssl req -new -key agent/agent.domain.com.key -out agent/agent.domain.com.csr -subj &amp;quot;/CN=skydive-agent&amp;quot; -config skydive-openssl.cnf
openssl x509 -req -days 365 -signkey agent/agent.domain.com.key -in agent/agent.domain.com.csr -out agent/agent.domain.com.crt -extfile skydive-openssl.cnf -extensions v3_req
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;skydive-openssl-cnf&#34;&gt;skydive-openssl.cnf&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;[req]
distinguished_name = req_distinguished_name
req_extensions = v3_req

[req_distinguished_name]
countryName = Country Name (2 letter code)
countryName_default = FR
stateOrProvinceName = State or Province Name (full name)
stateOrProvinceName_default = Paris
localityName = Locality Name (eg, city)
localityName_default = Paris
organizationalUnitName	= Organizational Unit Name (eg, section)
organizationalUnitName_default	= Skydive Team
commonName = skydive.domain.com
commonName_max	= 64

[ v3_req ]
# Extensions to add to a certificate request
basicConstraints = CA:TRUE
keyUsage = digitalSignature, keyEncipherment, keyCertSign
extendedKeyUsage = serverAuth,clientAuth
subjectAltName = @alt_names

[alt_names]
DNS.1 = agent.domain.com
DNS.2 = analyzer.domain.com
DNS.3 = localhost
IP.1 = 192.168.1.1
IP.2 = 192.168.69.14
IP.3 = 127.0.0.1
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Alerts</title>
      <link>//skydive-project.github.io/skydive/api/alerts/</link>
      <pubDate>Thu, 29 Sep 2016 11:02:01 +0200</pubDate>
      
      <guid>//skydive-project.github.io/skydive/api/alerts/</guid>
      <description>

&lt;p&gt;Skydive allows you to create alerts, based on queries on both topology graph
and flows.&lt;/p&gt;

&lt;h2 id=&#34;alert-evaluation&#34;&gt;Alert evaluation&lt;/h2&gt;

&lt;p&gt;An alert can be specified through a &lt;a href=&#34;//skydive-project.github.io/skydive/api/gremlin&#34;&gt;Gremlin&lt;/a&gt; query or a
JavaScript expression. The alert will be triggered if it returns:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;true&lt;/li&gt;
&lt;li&gt;a non empty string&lt;/li&gt;
&lt;li&gt;a number different from zero&lt;/li&gt;
&lt;li&gt;a non empty array&lt;/li&gt;
&lt;li&gt;a non empty map&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The alert is triggered only if the evaluation result differs from the previous evaluation.&lt;/p&gt;

&lt;p&gt;Gremlin example:&lt;/p&gt;

&lt;p&gt;With the following command, the alert is triggered as soon as the Gremlin query
returns something new (i.e. a new node returned by the query, an updated metadata in the returned nodes&amp;hellip;).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ skydive client alert create --expression &amp;quot;G.V().Has(&#39;Name&#39;, &#39;eth0&#39;, &#39;State&#39;, &#39;DOWN&#39;)&amp;quot;
{
  &amp;quot;UUID&amp;quot;: &amp;quot;185c49ba-341d-41a0-6f96-f3224140b2fa&amp;quot;,
  &amp;quot;Expression&amp;quot;: &amp;quot;G.V().Has(&#39;Name&#39;, &#39;eth0&#39;, &#39;State&#39;, &#39;DOWN&#39;)&amp;quot;,
  &amp;quot;CreateTime&amp;quot;: &amp;quot;2016-12-29T13:29:05.273620179+01:00&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;JavaScript example:&lt;/p&gt;

&lt;p&gt;If you prefer to trigger the alert only when the state of one of the node returned by a gremlin query goes down,
you can use the following JavaScript expression :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ skydive client alert create --expression &amp;quot;states = Gremlin(\&amp;quot;G.V().Has(&#39;Name&#39;, &#39;br-int-lb&#39;).Values(&#39;State&#39;)\&amp;quot;); result = false; for (var i = 0; i &amp;lt; states.length; i++){ if (states[i] == &#39;DOWN&#39;){ result = true; break;}} result;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The alert will be triggered every time the result of the JavaScript expression changes.&lt;/p&gt;

&lt;p&gt;With the following command, the alert is triggered when the bandwidth of the flow bypass 1Mbps.
It gets trigerred again the next time the bandwidth bypass this threshold.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ skydive client alert create --expression &amp;quot;Gremlin(\&amp;quot;G.Flows().Has(&#39;Network.A&#39;, &#39;192.168.0.1&#39;).Metrics().Sum()\&amp;quot;).ABBytes &amp;gt; 1*1024*1024&amp;quot; --trigger &amp;quot;duration:10s&amp;quot;
{
  &amp;quot;UUID&amp;quot;: &amp;quot;331b5590-c45d-4723-55f5-0087eef899eb&amp;quot;,
  &amp;quot;Expression&amp;quot;: &amp;quot;Gremlin(\&amp;quot;G.Flows().Has(&#39;Network.A&#39;, &#39;192.168.0.1&#39;).Metrics().Sum()\&amp;quot;).ABBytes &amp;gt; 1*1024*1024&amp;quot;,
  &amp;quot;Trigger&amp;quot;: &amp;quot;duration:10s&amp;quot;,
  &amp;quot;CreateTime&amp;quot;: &amp;quot;2016-12-29T13:29:05.197612381+01:00&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;fields&#34;&gt;Fields&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Name&lt;/code&gt;, the alert name (optional)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Description&lt;/code&gt;, a description for the alert (optional)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Expression&lt;/code&gt;, a Gremlin query or JavaScript expression&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Action&lt;/code&gt;, URL to trigger. Can be a &lt;a href=&#34;//skydive-project.github.io/skydive/api/alerts#webhook&#34;&gt;local file&lt;/a&gt; or a &lt;a href=&#34;//skydive-project.github.io/skydive/api/alerts#script&#34;&gt;WebHook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Trigger&lt;/code&gt;, event that triggers the alert evaluation. Periodic alerts can be
specified with &lt;code&gt;duration:5s&lt;/code&gt;, for an alert that will be evaluated every 5 seconds.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;notifications&#34;&gt;Notifications&lt;/h2&gt;

&lt;p&gt;When an alert is triggered, all the WebSocket clients will be notified with a
message of type &lt;code&gt;Alert&lt;/code&gt; with a JSON object with the attributes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;UUID&lt;/code&gt;, ID of the triggered alert&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Timestamp&lt;/code&gt;, timestamp of trigger&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ReasonData&lt;/code&gt;, the result of the alert evaluation. If &lt;code&gt;expression&lt;/code&gt; is a
Gremlin query, it will be the result of the query. If &lt;code&gt;expression&lt;/code&gt; is a
JavaScript statement, it will be the result of the evaluation of this
statement.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition to the WebSocket message, an alert can trigger different kind of
actions.&lt;/p&gt;

&lt;h3 id=&#34;webhook&#34;&gt;Webhook&lt;/h3&gt;

&lt;p&gt;A POST request is issued with the JSON message as payload.&lt;/p&gt;

&lt;h3 id=&#34;script&#34;&gt;Script&lt;/h3&gt;

&lt;p&gt;A local file (prefixed by file://) to execute a script. It receives the JSON
message through stdin&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Architecture</title>
      <link>//skydive-project.github.io/skydive/architecture/</link>
      <pubDate>Thu, 29 Sep 2016 11:02:01 +0200</pubDate>
      
      <guid>//skydive-project.github.io/skydive/architecture/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;//skydive-project.github.io/skydive/images/architecture.png&#34; alt=&#34;Skydive Architecture&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;graph&#34;&gt;Graph&lt;/h2&gt;

&lt;p&gt;Skydive relies on a event based graph engine, which means that notifications
are sent for each modification. Graphs expose notifications over WebSocket
connections. Skydive support multiple graph backends for the Graph. The &lt;code&gt;memory&lt;/code&gt;
backend will be always used by agents while the backend for analyzers can be
choosen. Each modification is kept in the datastore so that we have a full
history of the graph. This is really useful to troubleshoot even if
interfaces do not exist anymore.&lt;/p&gt;

&lt;h2 id=&#34;forwarder&#34;&gt;Forwarder&lt;/h2&gt;

&lt;p&gt;Forwards graph messages from agents to analyzers so that analyzers can build
an aggregation of all agent graphs.&lt;/p&gt;

&lt;h2 id=&#34;topology-probes&#34;&gt;Topology probes&lt;/h2&gt;

&lt;p&gt;Fill the graph with topology informations collected. Multiple probes fill the
graph in parallel. As an example there are probes filling graph with
network namespaces, netlink or OVSDB information.&lt;/p&gt;

&lt;h2 id=&#34;flow-table&#34;&gt;Flow table&lt;/h2&gt;

&lt;p&gt;Skydive keep a track of packets captured in flow tables. It allows Skydive to
keep metrics for each flows. At a given frequency or when the flow expires
(see the config file) flows are forwarded from agents to analyzers and then
to the datastore.&lt;/p&gt;

&lt;h2 id=&#34;flow-enhancer&#34;&gt;Flow enhancer&lt;/h2&gt;

&lt;p&gt;Each time a new flow is received by the analyzer the flow is enhanced with
topology informations like where it has been captured, where it originates from,
where the packet is going to.&lt;/p&gt;

&lt;h2 id=&#34;flow-probes&#34;&gt;Flow probes&lt;/h2&gt;

&lt;p&gt;Flow probes capture packets and fill agent flow tables. There are different
ways to capture packets like sFlow, afpacket, PCAP, etc.&lt;/p&gt;

&lt;h2 id=&#34;gremlin-engine&#34;&gt;Gremlin engine&lt;/h2&gt;

&lt;p&gt;Skydive uses Gremlin language as its graph traversal language. The Skydive
Gremlin implementation allows to use Gremlin for flow traversal purpose.
The Gremlin engine can either retrieve informations from the datastore or from
agents depending whether the request is about something is the past or for live
monitoring/troubleshooting.&lt;/p&gt;

&lt;h2 id=&#34;etcd&#34;&gt;Etcd&lt;/h2&gt;

&lt;p&gt;Skydive uses Etcd to store API objects like captures. Agents are watching Etcd
so that they can react on API calls.&lt;/p&gt;

&lt;h2 id=&#34;on-demand-probe&#34;&gt;On-demand probe&lt;/h2&gt;

&lt;p&gt;This component watches Etcd and the graph in order to start captures. So when a
new capture is created by the API on-demande probe looks for graph nodes
matching the Gremlin expression, and if so, start capturing traffic.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Flows</title>
      <link>//skydive-project.github.io/skydive/api/flows/</link>
      <pubDate>Thu, 29 Sep 2016 11:02:01 +0200</pubDate>
      
      <guid>//skydive-project.github.io/skydive/api/flows/</guid>
      <description>&lt;p&gt;The Flow Schema is described in a
&lt;a href=&#34;https://github.com/skydive-project/skydive/blob/master/flow/flow.proto&#34;&gt;protobuf file&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A typical Gremlin request on Flows will return a JSON version of the Flow
structure.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ skydive client topology query --gremlin &amp;quot;G.Flows().Limit(1)&amp;quot;
[
  {
    &amp;quot;ANodeTID&amp;quot;: &amp;quot;422190f1-bbde-4eb0-4849-1fd1209229fe&amp;quot;,
    &amp;quot;BNodeTID&amp;quot;: &amp;quot;f3f1256b-7097-487c-7a02-38a32e009b3c&amp;quot;,
    &amp;quot;LastUpdateMetric&amp;quot;: {
      &amp;quot;ABBytes&amp;quot;: 490,
      &amp;quot;ABPackets&amp;quot;: 5,
      &amp;quot;BABytes&amp;quot;: 490,
      &amp;quot;BAPackets&amp;quot;: 5,
      &amp;quot;Last&amp;quot;: 1477563666,
      &amp;quot;Start&amp;quot;: 1477563661
    },
    &amp;quot;LayersPath&amp;quot;: &amp;quot;Ethernet/IPv4/ICMPv4&amp;quot;,
    &amp;quot;Link&amp;quot;: {
      &amp;quot;A&amp;quot;: &amp;quot;02:48:4f:c4:40:99&amp;quot;,
      &amp;quot;B&amp;quot;: &amp;quot;e2:d0:f0:61:e7:81&amp;quot;,
      &amp;quot;Protocol&amp;quot;: &amp;quot;ETHERNET&amp;quot;
    },
    &amp;quot;Metric&amp;quot;: {
      &amp;quot;ABBytes&amp;quot;: 21658,
      &amp;quot;ABPackets&amp;quot;: 221,
      &amp;quot;BABytes&amp;quot;: 21658,
      &amp;quot;BAPackets&amp;quot;: 221,
      &amp;quot;Last&amp;quot;: 1477563666,
      &amp;quot;Start&amp;quot;: 1477563444
    },
    &amp;quot;Network&amp;quot;: {
      &amp;quot;A&amp;quot;: &amp;quot;192.168.0.1&amp;quot;,
      &amp;quot;B&amp;quot;: &amp;quot;192.168.0.2&amp;quot;,
      &amp;quot;Protocol&amp;quot;: &amp;quot;IPV4&amp;quot;
    },
    &amp;quot;NodeTID&amp;quot;: &amp;quot;f3f1256b-7097-487c-7a02-38a32e009b3c&amp;quot;,
    &amp;quot;TrackingID&amp;quot;: &amp;quot;f745fb1f59298a1773e35827adfa42dab4f469f9&amp;quot;,
    &amp;quot;UUID&amp;quot;: &amp;quot;caa24da240cb3b40c84ebb708e2e5dcbe3c54784&amp;quot;
  }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Below the description of the fields :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;UUID&lt;/code&gt;, Unique ID of the flow. The ID is unique per capture point, meaning
that a same flow will get a different ID for a different capture.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TrackingID&lt;/code&gt;, ID of the Flow which is the same across all the
captures point. This ID can be used to follow a Flow on each capture points.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NodeTID&lt;/code&gt;, TID metadata of the interface node in the topology where the flow was
captured.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ANodeTID&lt;/code&gt;, TID metadata of the interface node in the topology where the packet is
coming from.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BNodeTID&lt;/code&gt;, TID metadata of the interface node in the topology where the packet is
going to.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LayersPath&lt;/code&gt;, All the layers composing the packets.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Link&lt;/code&gt;, Link layer of the flow. A, B and Protocol describing the endpoints and
the protocol of this layer.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Network&lt;/code&gt;, Network layer of the flow. A, B and Protocol describing the
endpoints and the protocol of this layer.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Transport&lt;/code&gt;, Transport layer of the flow. A, B and Protocol describing the
endpoints and the protocol of this layer.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Metric&lt;/code&gt;, Current metrics of the flow. &lt;code&gt;AB*&lt;/code&gt; stands for metrics from
endpoint &lt;code&gt;A&lt;/code&gt; to endpoint &lt;code&gt;B&lt;/code&gt;, and &lt;code&gt;BA*&lt;/code&gt; for the reverse path.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Rest API</title>
      <link>//skydive-project.github.io/skydive/api/rest/</link>
      <pubDate>Thu, 29 Sep 2016 11:02:01 +0200</pubDate>
      
      <guid>//skydive-project.github.io/skydive/api/rest/</guid>
      <description>

&lt;h2 id=&#34;topology-flow-request&#34;&gt;Topology/Flow request&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;POST /api/topology HTTP/1.1
Content-Type: application/json

{
  &amp;quot;GremlinQuery&amp;quot;:&amp;quot;G.V()&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8

[
  {
    &amp;quot;Host&amp;quot;: &amp;quot;localhost.localdomain&amp;quot;,
    &amp;quot;ID&amp;quot;: &amp;quot;d6759df3-d4e0-408b-64d3-c82ea6c9aeda&amp;quot;,
    &amp;quot;Metadata&amp;quot;: {
      &amp;quot;Name&amp;quot;: &amp;quot;vm2&amp;quot;,
      &amp;quot;Path&amp;quot;: &amp;quot;/var/run/netns/vm2&amp;quot;,
      &amp;quot;TID&amp;quot;: &amp;quot;7daa39fe-92f7-5f9b-51b1-1dddcd41785c&amp;quot;,
      &amp;quot;Type&amp;quot;: &amp;quot;netns&amp;quot;
    }
  }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;POST /api/topology HTTP/1.1
Content-Type: application/json

{
  &amp;quot;GremlinQuery&amp;quot;:&amp;quot;G.Flows().Limit(1)&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;[
  {
    &amp;quot;ANodeTID&amp;quot;: &amp;quot;d9d6f8cf-4aa6-4a06-6785-3dc56032ef82&amp;quot;,
    &amp;quot;BNodeTID&amp;quot;: &amp;quot;488789f9-38be-4eba-704a-79996382de41&amp;quot;,
    &amp;quot;LastUpdateMetric&amp;quot;: {
      &amp;quot;ABBytes&amp;quot;: 490,
      &amp;quot;ABPackets&amp;quot;: 5,
      &amp;quot;BABytes&amp;quot;: 490,
      &amp;quot;BAPackets&amp;quot;: 5,
      &amp;quot;Last&amp;quot;: 1477572621,
      &amp;quot;Start&amp;quot;: 1477572616
    },
    &amp;quot;LayersPath&amp;quot;: &amp;quot;Ethernet/IPv4/ICMPv4&amp;quot;,
    &amp;quot;Link&amp;quot;: {
      &amp;quot;A&amp;quot;: &amp;quot;02:48:4f:c4:40:99&amp;quot;,
      &amp;quot;B&amp;quot;: &amp;quot;e2:d0:f0:61:e7:81&amp;quot;,
      &amp;quot;Protocol&amp;quot;: &amp;quot;ETHERNET&amp;quot;
    },
    &amp;quot;Metric&amp;quot;: {
      &amp;quot;ABBytes&amp;quot;: 1666,
      &amp;quot;ABPackets&amp;quot;: 17,
      &amp;quot;BABytes&amp;quot;: 1568,
      &amp;quot;BAPackets&amp;quot;: 16,
      &amp;quot;Last&amp;quot;: 1477572622,
      &amp;quot;Start&amp;quot;: 1477572606
    },
    &amp;quot;Network&amp;quot;: {
      &amp;quot;A&amp;quot;: &amp;quot;192.168.0.1&amp;quot;,
      &amp;quot;B&amp;quot;: &amp;quot;192.168.0.2&amp;quot;,
      &amp;quot;Protocol&amp;quot;: &amp;quot;IPV4&amp;quot;
    },
    &amp;quot;NodeTID&amp;quot;: &amp;quot;488789f9-38be-4eba-704a-79996382de41&amp;quot;,
    &amp;quot;TrackingID&amp;quot;: &amp;quot;f745fb1f59298a1773e35827adfa42dab4f469f9&amp;quot;,
    &amp;quot;UUID&amp;quot;: &amp;quot;ee29fc47f425d7a2e6de9379b0131f64a70fc991&amp;quot;
  }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;capture&#34;&gt;Capture&lt;/h2&gt;

&lt;p&gt;To create capture :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;POST /api/capture HTTP/1.1
Content-Type: application/json

{
  &amp;quot;GremlinQuery&amp;quot;:&amp;quot;g.V().Has(&#39;TID&#39;, &#39;de0cba34-5d96-5ce6-698a-dffd2e674f95&#39;)&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8

{
  &amp;quot;UUID&amp;quot;:&amp;quot;e2d9f084-4543-4f7e-6c2c-673f56ae4610&amp;quot;,
  &amp;quot;GremlinQuery&amp;quot;:&amp;quot;g.V().Has(&#39;TID&#39;, &#39;de0cba34-5d96-5ce6-698a-dffd2e674f95&#39;)&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To list captures :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;GET /api/capture HTTP/1.1
Content-Type: application/json
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;{
  &amp;quot;104fc114-e153-4f67-692a-60c636ee1597&amp;quot;:
  {
    &amp;quot;UUID&amp;quot;: &amp;quot;104fc114-e153-4f67-692a-60c636ee1597&amp;quot;
    &amp;quot;GremlinQuery&amp;quot;: &amp;quot;G.V().Has(&#39;TID&#39;, &#39;2108e074-feac-5a3c-60ca-5963e89c4059&#39;)&amp;quot;
    &amp;quot;Count&amp;quot;: 1
  },
  &amp;quot;e2d9f084-4543-4f7e-6c2c-673f56ae4610&amp;quot;:
  {
    &amp;quot;UUID&amp;quot;: &amp;quot;e2d9f084-4543-4f7e-6c2c-673f56ae4610&amp;quot;
    &amp;quot;GremlinQuery&amp;quot;: &amp;quot;g.V().Has(&#39;TID&#39;, &#39;de0cba34-5d96-5ce6-698a-dffd2e674f95&#39;)&amp;quot;
    &amp;quot;Count&amp;quot;: 1
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To delete a capture :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;DELETE /api/capture/7ca73f92-0547-475e-472d-d6e28664a117 HTTP/1.1
Content-Type: application/json
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Skydive Gremlin Query language</title>
      <link>//skydive-project.github.io/skydive/api/gremlin/</link>
      <pubDate>Wed, 22 Jun 2016 11:02:01 +0200</pubDate>
      
      <guid>//skydive-project.github.io/skydive/api/gremlin/</guid>
      <description>

&lt;h2 id=&#34;gremlin&#34;&gt;Gremlin&lt;/h2&gt;

&lt;p&gt;Skydive uses a subset of the
&lt;a href=&#34;https://en.wikipedia.org/wiki/Gremlin_(programming_language)&#34;&gt;Gremlin language&lt;/a&gt;
as query language for topology and flow requests.&lt;/p&gt;

&lt;p&gt;A Gremlin expression is a chain of steps that are evaluated from left to right.
In the context of Skydive nodes stand for interfaces, ports, bridges,
namespaces, etc. Links stand for any kind of relation between two nodes,
ownership(host, netns, ovsbridge, containers), layer2, etc.&lt;/p&gt;

&lt;p&gt;The following expression will return all the OpenvSwitch ports belonging to
an OpenvSwitch bridge named &lt;code&gt;br-int&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;G.V().Has(&#39;Name&#39;, &#39;br-int&#39;, &#39;Type&#39;, &#39;ovsbridge&#39;).Out()

[
  {
    &amp;quot;Host&amp;quot;: &amp;quot;test&amp;quot;,
    &amp;quot;ID&amp;quot;: &amp;quot;feae10c1-240e-48e0-4a13-c608ffd15700&amp;quot;,
    &amp;quot;Metadata&amp;quot;: {
      &amp;quot;Name&amp;quot;: &amp;quot;vm2-eth0&amp;quot;,
      &amp;quot;Type&amp;quot;: &amp;quot;ovsport&amp;quot;,
      &amp;quot;UUID&amp;quot;: &amp;quot;f68f3593-68c4-4778-b47f-0ef291654fcf&amp;quot;
    }
  },
  {
    &amp;quot;Host&amp;quot;: &amp;quot;test&amp;quot;,
    &amp;quot;ID&amp;quot;: &amp;quot;ca909ccf-203d-457d-70b8-06fe308221ef&amp;quot;,
    &amp;quot;Metadata&amp;quot;: {
      &amp;quot;Name&amp;quot;: &amp;quot;br-int&amp;quot;,
      &amp;quot;Type&amp;quot;: &amp;quot;ovsport&amp;quot;,
      &amp;quot;UUID&amp;quot;: &amp;quot;e5b47010-f479-4def-b2d0-d55f5dbf7dad&amp;quot;
    }
  }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The query has to be read as :&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;G&lt;/code&gt; returns the topology Graph&lt;/li&gt;
&lt;li&gt;&lt;code&gt;V&lt;/code&gt; step returns all the nodes belonging the Graph&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Has&lt;/code&gt; step returns only the node with the given metadata attributes&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Out&lt;/code&gt; step returns outgoing nodes&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;traversal-steps&#34;&gt;Traversal steps&lt;/h2&gt;

&lt;p&gt;The Skydive implements a subset of the Gremlin language steps and adds
&amp;ldquo;network analysis&amp;rdquo; specific steps.&lt;/p&gt;

&lt;h3 id=&#34;v-step&#34;&gt;V Step&lt;/h3&gt;

&lt;p&gt;V step returns the nodes belonging to the graph.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;G.V()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A node ID can be passed to the V step which will return the corresponding node.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;G.V(&#39;ca909ccf-203d-457d-70b8-06fe308221efca909ccf-203d-457d-70b8-06fe308221ef&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;has-step&#34;&gt;Has Step&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Has&lt;/code&gt; step filters out the nodes that don&amp;rsquo;t match the given metadata list. &lt;code&gt;Has&lt;/code&gt;
can be applied either on nodes or edges.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;G.V().Has(&#39;Name&#39;, &#39;test&#39;, &#39;Type&#39;, &#39;netns&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;in-out-both-steps&#34;&gt;In/Out/Both steps&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;In/Out&lt;/code&gt; steps returns either incoming, outgoing or neighbor nodes of
previously selected nodes.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;G.V().Has(&#39;Name&#39;, &#39;br-int&#39;, &#39;Type&#39;, &#39;ovsbridge&#39;).Out()
G.V().Has(&#39;Name&#39;, &#39;br-int&#39;, &#39;Type&#39;, &#39;ovsbridge&#39;).In()
G.V().Has(&#39;Name&#39;, &#39;br-int&#39;, &#39;Type&#39;, &#39;ovsbridge&#39;).Both()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Filters can be applied to these steps in order to select only the nodes
corresponding to the given metadata. In that case the step will act as a couple
of steps &lt;code&gt;Out/Has&lt;/code&gt; for example.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;G.V().Has(&#39;Name&#39;, &#39;br-int&#39;, &#39;Type&#39;, &#39;ovsbridge&#39;).Out(&#39;Name&#39;, &#39;intf1&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ine-oute-steps&#34;&gt;InE/OutE steps&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;InE/OutE&lt;/code&gt; steps returns the incoming/ougoing links.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;G.V().Has(&#39;Name&#39;, &#39;test&#39;, &#39;Type&#39;, &#39;netns&#39;).InE()
G.V().Has(&#39;Name&#39;, &#39;test&#39;, &#39;Type&#39;, &#39;netns&#39;).OutE()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Like for the &lt;code&gt;In/Out/Both&lt;/code&gt; steps metadata list can be passed directly as
parameters in order to filter links.&lt;/p&gt;

&lt;h3 id=&#34;inv-outv-steps&#34;&gt;InV/OutV steps&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;InV/OutV&lt;/code&gt; steps returns incoming, outgoing nodes attached to the previously
selected links.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;G.V().OutE().Has(&#39;Type&#39;, &#39;layer2&#39;).InV()
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;dedup-step&#34;&gt;Dedup step&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Dedup&lt;/code&gt; removes duplicated nodes/links or flows. &lt;code&gt;Dedup&lt;/code&gt; can take a parameter
in order to specify the field used for the deduplication.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;G.V().Out().Both().Dedup()
G.V().Out().Both().Dedup(&#39;Type&#39;)
G.Flows().Dedup(&#39;NodeTID&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;count-step&#34;&gt;Count step&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Count&lt;/code&gt; returns the number of elements retrieved by the previous step.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;G.V().Count()
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;values-step&#34;&gt;Values step&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Values&lt;/code&gt; returns the property value of elements retrieved by the previous step.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;G.V().Values(&#39;Name&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;keys-step&#34;&gt;Keys step&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Keys&lt;/code&gt; returns the list of properties of the elements retrieved by the previous step.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;G.V().Keys()
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;sum-step&#34;&gt;Sum step&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Sum&lt;/code&gt; returns sum of elements, named &amp;lsquo;Name&amp;rsquo;, retrieved by the previous step.
When attribute &amp;lsquo;Name&amp;rsquo; exists, must be integer type.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;G.V().Sum(&#39;Name&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;limit-step&#34;&gt;Limit step&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Limit&lt;/code&gt; limits the number of elements returned.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;g.Flows().Limit(1)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;shortestpathto-step&#34;&gt;ShortestPathTo step&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;ShortestPathTo&lt;/code&gt; step returns the shortest path to node matching the given
&lt;code&gt;Metadata&lt;/code&gt; predicate. This step returns a list of all the nodes traversed.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;G.V().Has(&#39;Type&#39;, &#39;netns&#39;).ShortestPathTo(Metadata(&#39;Type&#39;, &#39;host&#39;))

[
  [
    {
      &amp;quot;Host&amp;quot;: &amp;quot;test&amp;quot;,
      &amp;quot;ID&amp;quot;: &amp;quot;5221d3c3-3180-4a64-5337-f2f66b83ddd6&amp;quot;,
      &amp;quot;Metadata&amp;quot;: {
        &amp;quot;Name&amp;quot;: &amp;quot;vm1&amp;quot;,
        &amp;quot;Path&amp;quot;: &amp;quot;/var/run/netns/vm1&amp;quot;,
        &amp;quot;Type&amp;quot;: &amp;quot;netns&amp;quot;
      }
    },
    {
      &amp;quot;Host&amp;quot;: &amp;quot;test&amp;quot;,
      &amp;quot;ID&amp;quot;: &amp;quot;test&amp;quot;,
      &amp;quot;Metadata&amp;quot;: {
        &amp;quot;Name&amp;quot;: &amp;quot;pc48.home&amp;quot;,
        &amp;quot;Type&amp;quot;: &amp;quot;host&amp;quot;
      }
    }
  ]
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is possible to filter the link traversed according to the given &lt;code&gt;Metadata&lt;/code&gt;
predicate as a second parameter.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;G.V().Has(&#39;Type&#39;, &#39;netns&#39;).ShortestPathTo(Metadata(&#39;Type&#39;, &#39;host&#39;), Metadata(&#39;Type&#39;, &#39;layer2&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;graphpath-step&#34;&gt;GraphPath step&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;GraphPath&lt;/code&gt; step returns a path string corresponding to the reverse path
from the nodes to the host node they belong to.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;G.V().Has(&#39;Type&#39;, &#39;netns&#39;).GraphPath()

[
  &amp;quot;test[Type=host]/vm1[Type=netns]&amp;quot;
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The format of the path returned is the following:
&lt;code&gt;node_name[Type=node_type]/.../node_name[Type=node_type]&lt;/code&gt;`&lt;/p&gt;

&lt;h3 id=&#34;at-step&#34;&gt;At step&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;At&lt;/code&gt; allows to set the time context of the Gremlin request. It means that
we can contextualize a request to a specific point of time therefore being
able to see how was the graph in the past.
Supported formats for time argument are :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Timestamp&lt;/li&gt;
&lt;li&gt;RFC1123 format&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/pkg/time/#ParseDuration&#34;&gt;Go Duration format&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;G.At(1479899809).V()
G.At(&#39;-1m&#39;).V()
G.At(&#39;Sun, 06 Nov 2016 08:49:37 GMT&#39;).V()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;At&lt;/code&gt; takes also an optional duration parameter which allows to specify a
period of time in second for the lookup. This is useful especially when retrieving
metrics. See &lt;a href=&#34;//skydive-project.github.io/skydive/api/gremlin#metrics-step&#34;&gt;&lt;code&gt;Metrics&lt;/code&gt; step&lt;/a&gt; for more information.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;G.At(&#39;-1m&#39;, 500).V()
G.At(&#39;-1m&#39;, 3600).Flows()
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;predicates&#34;&gt;Predicates&lt;/h3&gt;

&lt;p&gt;Predicates which can be used with &lt;code&gt;Has&lt;/code&gt;, &lt;code&gt;In*&lt;/code&gt;, &lt;code&gt;Out*&lt;/code&gt; steps :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NE&lt;/code&gt;, matches graph elements for which metadata don&amp;rsquo;t match specified values&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;G.V().Has(&#39;Type&#39;, NE(&#39;ovsbridge&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Within&lt;/code&gt;, matches graph elements for which metadata values match one member of
the given array.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;G.V().Has(&#39;Type&#39;, Within(&#39;ovsbridge&#39;, &#39;ovsport&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Without&lt;/code&gt;, matches graph elements for which metadata values don&amp;rsquo;t match any of
the members of the given array.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;G.V().Has(&#39;Type&#39;, Without(&#39;ovsbridge&#39;, &#39;ovsport&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Regex&lt;/code&gt;, matches graph elements for which metadata matches the given regular
expression.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;G.V().Has(&#39;Name&#39;, Regex(&#39;^tap.*&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;flows-step&#34;&gt;Flows step&lt;/h3&gt;

&lt;p&gt;Flows step returns flows of nodes where a capture has been started or of nodes
where the packets are coming from or going to.
The following Gremlin query returns the flows from the node &lt;code&gt;br-int&lt;/code&gt; where
an sFlow capture has been started.
See the &lt;a href=&#34;//skydive-project.github.io/skydive/getting-started/client/#flow-captures&#34;&gt;client section&lt;/a&gt;
in order to know how to start a capture from a Gremlin query.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;G.V().Has(&#39;Name&#39;, &#39;br-int&#39;).Flows()
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;flows-in-out-steps&#34;&gt;Flows In/Out steps&lt;/h3&gt;

&lt;p&gt;From a flow step it is possible to get the node from where the packets are
coming or the node where packets are going to. Node steps are of course
applicable after &lt;code&gt;In/Out&lt;/code&gt; flow steps.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;G.V().Has(&#39;Name&#39;, &#39;br-int&#39;).Flows().In()
G.V().Has(&#39;Name&#39;, &#39;br-int&#39;).Flows().Out()
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;flows-has-step&#34;&gt;Flows Has step&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Has&lt;/code&gt; step filters out the flows that don&amp;rsquo;t match the given attributes list.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;G.Flows().Has(&#39;Network.A&#39;, &#39;192.168.0.1&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Key can be any attributes of the Flow data structure :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;UUID&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TrackingID&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NodeTID&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ANodeTID&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BNodeTID&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LayersPath&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Application&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Link&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Link.A&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Link.B&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Link.Protocol&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Network&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Network.A&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Network.B&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Network.Protocol&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Transport&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Transport.A&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Transport.B&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Transport.Protocol&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Metric.ABBytes&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Metric.BABytes&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Metric.ABPackets&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Metric.BAPackets&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Start&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Last&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lt, Lte, Gt, Gte predicates can be used on numerical fields.
See &lt;a href=&#34;//skydive-project.github.io/skydive/api/flows/&#34;&gt;Flow Schema&lt;/a&gt; for further explanations.&lt;/p&gt;

&lt;p&gt;Link, Network and Transport keys shall be matched with any of A or B by using OR operator.&lt;/p&gt;

&lt;h3 id=&#34;flows-sort-step&#34;&gt;Flows Sort step&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Sort&lt;/code&gt; step sorts flows by the given field and requested order.
By default, the flows are in ascending order by their &lt;code&gt;Last&lt;/code&gt; field.
&lt;code&gt;ASC&lt;/code&gt; and &lt;code&gt;DESC&lt;/code&gt; predicates can be used to specify ascending and descending order respectively.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;G.Flows().Sort()
G.Flows().Sort(&amp;quot;Metric.ABPackets&amp;quot;)
G.Flows().Sort(DESC, &amp;quot;Metric.ABPackets&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;flows-dedup-step&#34;&gt;Flows Dedup step&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Dedup&lt;/code&gt; step de-duplicates flows having the same TrackingID.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;G.Flows().Dedup()
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;metrics-step&#34;&gt;Metrics step&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Metrics&lt;/code&gt; returns arrays of metrics of a set of flows or interfaces, grouped by
the flows UUIDs or Node IDs.&lt;/p&gt;

&lt;p&gt;For flow metrics :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;G.Flows().Metrics()
[
  {
    &amp;quot;64249da029a25d09668ea4a61b14a02c3d083da0&amp;quot;: [
      {
        &amp;quot;ABBytes&amp;quot;: 980,
        &amp;quot;ABPackets&amp;quot;: 10,
        &amp;quot;BABytes&amp;quot;: 980,
        &amp;quot;BAPackets&amp;quot;: 10,
        &amp;quot;Last&amp;quot;: 1479899789,
        &amp;quot;Start&amp;quot;: 1479899779
      }
  }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and for interface metrics :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;G.V().Metrics()
[
  {
    &amp;quot;fc2a6103-599e-4821-4c87-c8224bd0e84e&amp;quot;: [
    {
      &amp;quot;Collisions&amp;quot;: 0,
      &amp;quot;Last&amp;quot;: 1489161773820,
      &amp;quot;Multicast&amp;quot;: 0,
      &amp;quot;RxBytes&amp;quot;: 7880,
      &amp;quot;RxCompressed&amp;quot;: 0,
      &amp;quot;RxCrcErrors&amp;quot;: 0,
      &amp;quot;RxDropped&amp;quot;: 0,
      &amp;quot;RxErrors&amp;quot;: 0,
      &amp;quot;RxFifoErrors&amp;quot;: 0,
      &amp;quot;RxFrameErrors&amp;quot;: 0,
      &amp;quot;RxLengthErrors&amp;quot;: 0,
      &amp;quot;RxMissedErrors&amp;quot;: 0,
      &amp;quot;RxOverErrors&amp;quot;: 0,
      &amp;quot;RxPackets&amp;quot;: 10,
      &amp;quot;Start&amp;quot;: 1489161768820,
      &amp;quot;TxAbortedErrors&amp;quot;: 0,
      &amp;quot;TxBytes&amp;quot;: 7880,
      &amp;quot;TxCarrierErrors&amp;quot;: 0,
      &amp;quot;TxCompressed&amp;quot;: 0,
      &amp;quot;TxDropped&amp;quot;: 0,
      &amp;quot;TxErrors&amp;quot;: 0,
      &amp;quot;TxFifoErrors&amp;quot;: 0,
      &amp;quot;TxHeartbeatErrors&amp;quot;: 0,
      &amp;quot;TxPackets&amp;quot;: 10,
      &amp;quot;TxWindowErrors&amp;quot;: 0
    }

  }
]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>How to deploy Skydive with kubernetes</title>
      <link>//skydive-project.github.io/skydive/getting-started/kubernetes/</link>
      <pubDate>Sat, 14 May 2016 11:02:01 +0200</pubDate>
      
      <guid>//skydive-project.github.io/skydive/getting-started/kubernetes/</guid>
      <description>

&lt;h2 id=&#34;kubernetes-deployment&#34;&gt;Kubernetes deployment&lt;/h2&gt;

&lt;p&gt;Skydive provides a Kubernetes
&lt;a href=&#34;https://github.com/skydive-project/skydive/blob/master/contrib/kubernetes/skydive.yaml&#34;&gt;file&lt;/a&gt;
which can be used to deploy Skydive. It will deploy an Elasticsearch,
a Skydive analyzer and Skydive Agent on each Kubernetes nodes. Once you will
have Skydive deployment on top on your Kubernetes cluster you will be able to
monitor, capture, troubleshoot your container networking stack.&lt;/p&gt;

&lt;p&gt;A skydive Analyzer &lt;a href=&#34;http://kubernetes.io/docs/user-guide/services/&#34;&gt;Kubernetes service&lt;/a&gt;
is created and exposes ports for Elasticsearch and the Analyzer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Elasticsearch: 9200&lt;/li&gt;
&lt;li&gt;Analyzer: 8082&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://kubernetes.io/docs/admin/daemons/&#34;&gt;Kubernetes DaemonSet&lt;/a&gt; is used for
Agents in order to have one Agent per node.&lt;/p&gt;

&lt;h2 id=&#34;creation&#34;&gt;Creation&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;kubectl create -f skydive.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you have your environment set up, going to the Analyzer service
should show similar to the following capture.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//skydive-project.github.io/skydive/images/kubernetes-two-nodes.png&#34; alt=&#34;WebUI Capture&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>//skydive-project.github.io/skydive/contact/</link>
      <pubDate>Fri, 06 May 2016 11:03:48 +0200</pubDate>
      
      <guid>//skydive-project.github.io/skydive/contact/</guid>
      <description>

&lt;h2 id=&#34;irc&#34;&gt;IRC&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;#skydive-project on irc.freenode.net&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;mailing-list&#34;&gt;Mailing list&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.redhat.com/mailman/listinfo/skydive-dev&#34;&gt;https://www.redhat.com/mailman/listinfo/skydive-dev&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Contributing</title>
      <link>//skydive-project.github.io/skydive/contributing/</link>
      <pubDate>Fri, 06 May 2016 11:02:01 +0200</pubDate>
      
      <guid>//skydive-project.github.io/skydive/contributing/</guid>
      <description>&lt;p&gt;Your contributions are more than welcome. Please check
&lt;a href=&#34;https://github.com/skydive-project/skydive/blob/master/CONTRIBUTING.md&#34;&gt;https://github.com/skydive-project/skydive/blob/master/CONTRIBUTING.md&lt;/a&gt;
to know about the process.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to deploy Skydive with Devstack</title>
      <link>//skydive-project.github.io/skydive/getting-started/openstack/</link>
      <pubDate>Fri, 06 May 2016 11:02:01 +0200</pubDate>
      
      <guid>//skydive-project.github.io/skydive/getting-started/openstack/</guid>
      <description>

&lt;h2 id=&#34;devstack-plugin&#34;&gt;Devstack plugin&lt;/h2&gt;

&lt;p&gt;Skydive provides a DevStack plugin that can be used in order to have
Skydive Agents/Analyzer set up with the proper probes
by DevStack.&lt;/p&gt;

&lt;p&gt;For a single node setup adding the following lines to your local.conf file
should be enough.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;enable_plugin skydive https://github.com/skydive-project/skydive.git

enable_service skydive-agent skydive-analyzer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The plugin accepts the following parameters:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;# Address on which skydive analyzer process listens for connections.
# Must be in ip:port format
#SKYDIVE_ANALYZER_LISTEN=

# Inform the agent about the address on which analyzers are listening
# Must be in ip:port format
#SKYDIVE_ANALYZERS=

# ip:port address on which skydive agent listens for connections.
#SKYDIVE_AGENT_LISTEN=

# Configure the skydive agent with the etcd server address
# http://IP_ADDRESS:12379
#SKYDIVE_AGENT_ETCD=

# The path for the generated skydive configuration file
#SKYDIVE_CONFIG_FILE=

# List of agent probes to be used by the agent
# Ex: netns netlink ovsdb
#SKYDIVE_AGENT_PROBES=

# Remote port for ovsdb server.
#SKYDIVE_OVSDB_REMOTE_PORT=6640

# Set the default log level, default: INFO
#SKYDIVE_LOGLEVEL=DEBUG

# List of public interfaces for the agents to register in fabric
#SKYDIVE_PUBLIC_INTERFACES=devstack1/eth0 devstack2/eth1
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;the-classical-two-nodes-deployment&#34;&gt;The classical two nodes deployment&lt;/h2&gt;

&lt;p&gt;Inside the Devstack folder of the Skydive sources there are two local.conf files
that can be used in order to deployment two Devstack with Skydive. The first
file will install a full Devstack with Skydive analyzer and agent. The second
one will install a compute Devstack with only the skydive agent.&lt;/p&gt;

&lt;p&gt;For Skydive to create a TOR object that links both Devstack, add the following
line to your local.conf file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;SKYDIVE_PUBLIC_INTERFACES=devstack1/eth0 devstack2/eth1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where &lt;code&gt;devstack1&lt;/code&gt; and &lt;code&gt;devstack2&lt;/code&gt; are the hostnames of the two nodes followed
by their respective public interface.&lt;/p&gt;

&lt;p&gt;Skydive will be set with the probes for OpenvSwitch and Neutron. It will be set
to use Keystone as authentication mechanism, so the credentials will be the same
than the admin.&lt;/p&gt;

&lt;p&gt;Once you have your environment set up, going to the Analyzer Web Interface
should show similar to the following capture.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//skydive-project.github.io/skydive/images/devstack-two-nodes.png&#34; alt=&#34;WebUI Capture&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;capture-traffic&#34;&gt;Capture traffic&lt;/h2&gt;

&lt;p&gt;Now we have our two nodes up and running we may want to start capturing
packets. The following command can be used in order to start a capture on all
the &lt;code&gt;br-int&lt;/code&gt; bridges.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ export SKYDIVE_USERNAME=admin
$ export SKYDIVE_PASSWORD=password
$ export SKYDIVE_ANALYZERS=localhost:8082 # Should be the same as SERVICE_HOST in local.conf

$ skydive client capture create --gremlin &amp;quot;G.V().Has(&#39;Name&#39;, &#39;br-int&#39;)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ skydive client capture list
{
  &amp;quot;d62b3176-ebc8-44ed-7001-191270dc4d76&amp;quot;: {
    &amp;quot;UUID&amp;quot;: &amp;quot;d62b3176-ebc8-44ed-7001-191270dc4d76&amp;quot;,
    &amp;quot;GremlinQuery&amp;quot;: &amp;quot;G.V().Has(&#39;Name&#39;, &#39;br-int&#39;)&amp;quot;,
    &amp;quot;Count&amp;quot;: 1
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To get Flows captured :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;skydive client topology query --gremlin &amp;quot;G.Flows()&amp;quot;
[
  {
    &amp;quot;ANodeTID&amp;quot;: &amp;quot;422190f1-bbde-4eb0-4849-1fd1209229fe&amp;quot;,
    &amp;quot;BNodeTID&amp;quot;: &amp;quot;f3f1256b-7097-487c-7a02-38a32e009b3c&amp;quot;,
    &amp;quot;LastUpdateMetric&amp;quot;: {
      &amp;quot;ABBytes&amp;quot;: 490,
      &amp;quot;ABPackets&amp;quot;: 5,
      &amp;quot;BABytes&amp;quot;: 490,
      &amp;quot;BAPackets&amp;quot;: 5,
      &amp;quot;Last&amp;quot;: 1477567166,
      &amp;quot;Start&amp;quot;: 1477567161
    },
    &amp;quot;LayersPath&amp;quot;: &amp;quot;Ethernet/IPv4/ICMPv4&amp;quot;,
    &amp;quot;Link&amp;quot;: {
      &amp;quot;A&amp;quot;: &amp;quot;02:48:4f:c4:40:99&amp;quot;,
      &amp;quot;B&amp;quot;: &amp;quot;e2:d0:f0:61:e7:81&amp;quot;,
      &amp;quot;Protocol&amp;quot;: &amp;quot;ETHERNET&amp;quot;
    },
    &amp;quot;Metric&amp;quot;: {
      &amp;quot;ABBytes&amp;quot;: 364560,
      &amp;quot;ABPackets&amp;quot;: 3720,
      &amp;quot;BABytes&amp;quot;: 364560,
      &amp;quot;BAPackets&amp;quot;: 3720,
      &amp;quot;Last&amp;quot;: 1477567165,
      &amp;quot;Start&amp;quot;: 1477563444
    },
    &amp;quot;Network&amp;quot;: {
      &amp;quot;A&amp;quot;: &amp;quot;192.168.0.1&amp;quot;,
      &amp;quot;B&amp;quot;: &amp;quot;192.168.0.2&amp;quot;,
      &amp;quot;Protocol&amp;quot;: &amp;quot;IPV4&amp;quot;
    },
    &amp;quot;NodeTID&amp;quot;: &amp;quot;f3f1256b-7097-487c-7a02-38a32e009b3c&amp;quot;,
    &amp;quot;TrackingID&amp;quot;: &amp;quot;f745fb1f59298a1773e35827adfa42dab4f469f9&amp;quot;,
    &amp;quot;UUID&amp;quot;: &amp;quot;caa24da240cb3b40c84ebb708e2e5dcbe3c54784&amp;quot;
  }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For a complete description of the flow structure can be found
&lt;a href=&#34;//skydive-project.github.io/skydive/api/flows/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to deploy Skydive with Docker</title>
      <link>//skydive-project.github.io/skydive/getting-started/docker/</link>
      <pubDate>Fri, 06 May 2016 11:02:01 +0200</pubDate>
      
      <guid>//skydive-project.github.io/skydive/getting-started/docker/</guid>
      <description>

&lt;h2 id=&#34;docker&#34;&gt;Docker&lt;/h2&gt;

&lt;p&gt;A Docker image is available on the &lt;a href=&#34;https://hub.docker.com/r/skydive/&#34;&gt;Skydive Docker Hub account&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To start the analyzer :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;docker run -p 8082:8082 skydive/skydive analyzer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To start the agent :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;docker run --privileged --pid=host --net=host -p 8081:8081 -v /var/run/docker.sock:/var/run/docker.sock skydive/skydive agent
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;docker-compose&#34;&gt;Docker Compose&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;Docker Compose&lt;/a&gt; can also be used to automatically start
an Elasticsearch container, a Skydive analyzer container and a Skydive agent container. The service
definition is located in the &lt;code&gt;contrib/docker&lt;/code&gt; folder of the Skydive sources.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;docker-compose up
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Installation</title>
      <link>//skydive-project.github.io/skydive/getting-started/install/</link>
      <pubDate>Fri, 06 May 2016 11:02:01 +0200</pubDate>
      
      <guid>//skydive-project.github.io/skydive/getting-started/install/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Skydive relies on two main components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;skydive agent, has to be started on each node where the topology and flows
informations will be captured&lt;/li&gt;
&lt;li&gt;skydive analyzer, the node collecting data captured by the agents&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;dependencies&#34;&gt;Dependencies&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Go &amp;gt;= 1.6&lt;/li&gt;
&lt;li&gt;Elasticsearch &amp;gt;= 2.0&lt;/li&gt;
&lt;li&gt;libpcap&lt;/li&gt;
&lt;li&gt;libxml2&lt;/li&gt;
&lt;li&gt;protoc &amp;gt;= 3.0&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;install&#34;&gt;Install&lt;/h2&gt;

&lt;p&gt;Make sure you have a working Go environment. &lt;a href=&#34;http://golang.org/doc/install.html&#34;&gt;See the install instructions&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ mkdir -p $GOPATH/src/github.com/skydive-project
$ git clone https://github.com/skydive-project/skydive.git $GOPATH/src/github.com/skydive-project/skydive
$ cd $GOPATH/src/github.com/skydive-project/skydive
$ make install
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;

&lt;p&gt;For a single node setup, the configuration file is optional. For a multiple
node setup, the analyzer IP/PORT need to be adapted.&lt;/p&gt;

&lt;p&gt;Processes are bound to 127.0.0.1 by default, you can explicitly change binding
address with &amp;ldquo;listen: 0.0.0.0:port&amp;rdquo; in the proper configuration sections.&lt;/p&gt;

&lt;p&gt;User can add host metadata to specify an extra host information in
&amp;ldquo;agent.metadata&amp;rdquo; configuration section. All the key value pairs given
under this configuration section will be added to host metadata.&lt;/p&gt;

&lt;p&gt;See the full list of configuration parameters in the sample configuration file
&lt;a href=&#34;https://github.com/skydive-project/skydive/blob/master/etc/skydive.yml.default&#34;&gt;etc/skydive.yml.default&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;start&#34;&gt;Start&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ skydive agent [--conf etc/skydive.yml]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ skydive analyzer [--conf etc/skydive.yml]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;all-in-one&#34;&gt;All-in-one&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;all-in-one&lt;/code&gt; mode can be used to start an Agent and an Analyzer at once.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ skydive allinone [--conf etc/skydive.yml]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Skydive client, API &amp; WebUI</title>
      <link>//skydive-project.github.io/skydive/getting-started/client/</link>
      <pubDate>Fri, 06 May 2016 11:02:01 +0200</pubDate>
      
      <guid>//skydive-project.github.io/skydive/getting-started/client/</guid>
      <description>

&lt;h2 id=&#34;client&#34;&gt;Client&lt;/h2&gt;

&lt;p&gt;Skydive client can be used to interact with Skydive Analyzer and Agents.
Running it without any command will return all the commands available.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ skydive client

Usage:
  skydive client [command]

Available Commands:
  alert       Manage alerts
  capture     Manage captures

Flags:
  -h, --help[=false]: help for client
      --password=&amp;quot;&amp;quot;: password auth parameter
      --username=&amp;quot;&amp;quot;: username auth parameter
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Specifying the subcommand will give the usage of the subcommand.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ skydive client capture
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If an authentication mechanism is defined in the configuration file the username
and password parameter have to be used for each command. Environment variables
SKYDIVE_USERNAME and SKYDIVE_PASSWORD can be used as default value for the
username/password command line parameters.&lt;/p&gt;

&lt;h2 id=&#34;webui&#34;&gt;WebUI&lt;/h2&gt;

&lt;p&gt;To access to the WebUI of agents or analyzer:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;http://&amp;lt;address&amp;gt;:&amp;lt;port&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;topology-requests&#34;&gt;Topology requests&lt;/h2&gt;

&lt;p&gt;Skydive uses the Gremlin traversal language as a topology request language.
Requests on the topology can be done as following :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ skydive client topology query --gremlin &amp;quot;G.V().Has(&#39;Name&#39;, &#39;br-int&#39;, &#39;Type&#39; ,&#39;ovsbridge&#39;)&amp;quot;
[
  {
    &amp;quot;Host&amp;quot;: &amp;quot;pc48.home&amp;quot;,
    &amp;quot;ID&amp;quot;: &amp;quot;1e4fc503-312c-4e4f-4bf5-26263ce82e0b&amp;quot;,
    &amp;quot;Metadata&amp;quot;: {
      &amp;quot;Name&amp;quot;: &amp;quot;br-int&amp;quot;,
      &amp;quot;Type&amp;quot;: &amp;quot;ovsbridge&amp;quot;,
      &amp;quot;UUID&amp;quot;: &amp;quot;c80cf5a7-998b-49ca-b2b2-7a1d050facc8&amp;quot;
    }
  }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Refer to the &lt;a href=&#34;//skydive-project.github.io/skydive/api/gremlin/&#34;&gt;Gremlin section&lt;/a&gt; for further
explanations about the syntax and the functions available.&lt;/p&gt;

&lt;h2 id=&#34;flow-captures&#34;&gt;Flow captures&lt;/h2&gt;

&lt;p&gt;Captures are described in &lt;a href=&#34;//skydive-project.github.io/skydive/api/captures/&#34;&gt;this section&lt;/a&gt;
The following command starts a capture on all &lt;code&gt;docker0&lt;/code&gt; interfaces:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ skydive client capture create --gremlin &amp;quot;G.V().Has(&#39;Name&#39;, &#39;docker0&#39;)&amp;quot;

{
  &amp;quot;UUID&amp;quot;: &amp;quot;76de5697-106a-4f50-7455-47c2fa7a964f&amp;quot;,
  &amp;quot;GremlinQuery&amp;quot;: &amp;quot;G.V().Has(&#39;Name&#39;, &#39;docker0&#39;)&amp;quot;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To delete a capture :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ skydive client capture delete &amp;lt;capture UUID&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Flows Gremlin step can be used in order to see the flows captured. See the
&lt;a href=&#34;//skydive-project.github.io/skydive/getting-started/gremlin/&#34;&gt;Gremlin section&lt;/a&gt; for further explanations.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;skydive client topology query --gremlin &amp;quot;G.V().Has(&#39;Name&#39;, &#39;docker0&#39;).Flows()&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>