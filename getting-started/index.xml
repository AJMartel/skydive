<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Getting-starteds on Skydive Docs</title>
    <link>//skydive-project.github.io/skydive/getting-started/</link>
    <description>Recent content in Getting-starteds on Skydive Docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 28 Nov 2016 15:21:44 +0100</lastBuildDate>
    <atom:link href="//skydive-project.github.io/skydive/getting-started/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>vagrant</title>
      <link>//skydive-project.github.io/skydive/getting-started/vagrant/</link>
      <pubDate>Mon, 28 Nov 2016 15:21:44 +0100</pubDate>
      
      <guid>//skydive-project.github.io/skydive/getting-started/vagrant/</guid>
      <description>

&lt;h2 id=&#34;vagrant-deployment&#34;&gt;Vagrant deployment&lt;/h2&gt;

&lt;p&gt;You can use Vagrant to deploy a Skydive environment with one virtual machine
running both Skydive analyzer and Elasticsearch, and two virtual machines with the
Skydive agent. This &lt;code&gt;Vagrantfile&lt;/code&gt;, hosted in &lt;code&gt;contrib/vagrant&lt;/code&gt; of the Git
repository, makes use of the
&lt;a href=&#34;https://github.com/vagrant-libvirt/vagrant-libvirt&#34;&gt;libvirt Vagrant provider&lt;/a&gt;
and uses Fedora as the box image.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;cd contrib/vagrant
vagrant up
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>How to deploy Skydive with kubernetes</title>
      <link>//skydive-project.github.io/skydive/getting-started/kubernetes/</link>
      <pubDate>Sat, 14 May 2016 11:02:01 +0200</pubDate>
      
      <guid>//skydive-project.github.io/skydive/getting-started/kubernetes/</guid>
      <description>

&lt;h2 id=&#34;kubernetes-deployment&#34;&gt;Kubernetes deployment&lt;/h2&gt;

&lt;p&gt;Skydive provides a Kubernetes
&lt;a href=&#34;https://github.com/skydive-project/skydive/blob/master/contrib/kubernetes/skydive.yaml&#34;&gt;file&lt;/a&gt;
which can be used to deploy Skydive. It will deploy an Elasticsearch,
a Skydive analyzer and Skydive Agent on each Kubernetes nodes. Once you will
have Skydive deployment on top on your Kubernetes cluster you will be able to
monitor, capture, troubleshoot your container networking stack.&lt;/p&gt;

&lt;p&gt;A skydive Analyzer &lt;a href=&#34;http://kubernetes.io/docs/user-guide/services/&#34;&gt;Kubernetes service&lt;/a&gt;
is created and exposes ports for Elasticsearch and the Analyzer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Elasticsearch: 9200&lt;/li&gt;
&lt;li&gt;Analyzer: 8082&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://kubernetes.io/docs/admin/daemons/&#34;&gt;Kubernetes DaemonSet&lt;/a&gt; is used for
Agents in order to have one Agent per node.&lt;/p&gt;

&lt;h2 id=&#34;creation&#34;&gt;Creation&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;kubectl create -f skydive.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you have your environment set up, going to the Analyzer service
should show similar to the following capture.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//skydive-project.github.io/skydive/images/kubernetes-two-nodes.png&#34; alt=&#34;WebUI Capture&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to deploy Skydive with Devstack</title>
      <link>//skydive-project.github.io/skydive/getting-started/openstack/</link>
      <pubDate>Fri, 06 May 2016 11:02:01 +0200</pubDate>
      
      <guid>//skydive-project.github.io/skydive/getting-started/openstack/</guid>
      <description>

&lt;h2 id=&#34;devstack-plugin&#34;&gt;Devstack plugin&lt;/h2&gt;

&lt;p&gt;Skydive provides a DevStack plugin that can be used in order to have
Skydive Agents/Analyzer set up with the proper probes
by DevStack.&lt;/p&gt;

&lt;p&gt;For a single node setup adding the following lines to your local.conf file
should be enough.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;enable_plugin skydive https://github.com/skydive-project/skydive.git

enable_service skydive-agent skydive-analyzer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The plugin accepts the following parameters:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;# Address on which skydive analyzer process listens for connections.
# Must be in ip:port format
#SKYDIVE_ANALYZER_LISTEN=

# Inform the agent about the address on which analyzers are listening
# Must be in ip:port format
#SKYDIVE_ANALYZERS=

# ip:port address on which skydive agent listens for connections.
#SKYDIVE_AGENT_LISTEN=

# Configure the skydive agent with the etcd server address
# http://IP_ADDRESS:12379
#SKYDIVE_AGENT_ETCD=

# The path for the generated skydive configuration file
#SKYDIVE_CONFIG_FILE=

# List of agent probes to be used by the agent
# Ex: netns netlink ovsdb
#SKYDIVE_AGENT_PROBES=

# Remote port for ovsdb server.
#SKYDIVE_OVSDB_REMOTE_PORT=6640

# Set the default log level, default: INFO
#SKYDIVE_LOGLEVEL=DEBUG

# List of public interfaces for the agents to register in fabric
#SKYDIVE_PUBLIC_INTERFACES=devstack1/eth0 devstack2/eth1
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;the-classical-two-nodes-deployment&#34;&gt;The classical two nodes deployment&lt;/h2&gt;

&lt;p&gt;Inside the Devstack folder of the Skydive sources there are two local.conf files
that can be used in order to deployment two Devstack with Skydive. The first
file will install a full Devstack with Skydive analyzer and agent. The second
one will install a compute Devstack with only the skydive agent.&lt;/p&gt;

&lt;p&gt;For Skydive to create a TOR object that links both Devstack, add the following
line to your local.conf file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;SKYDIVE_PUBLIC_INTERFACES=devstack1/eth0 devstack2/eth1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where &lt;code&gt;devstack1&lt;/code&gt; and &lt;code&gt;devstack2&lt;/code&gt; are the hostnames of the two nodes followed
by their respective public interface.&lt;/p&gt;

&lt;p&gt;Skydive will be set with the probes for OpenvSwitch and Neutron. It will be set
to use Keystone as authentication mechanism, so the credentials will be the same
than the admin.&lt;/p&gt;

&lt;p&gt;Once you have your environment set up, going to the Analyzer Web Interface
should show similar to the following capture.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//skydive-project.github.io/skydive/images/devstack-two-nodes.png&#34; alt=&#34;WebUI Capture&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;capture-traffic&#34;&gt;Capture traffic&lt;/h2&gt;

&lt;p&gt;Now we have our two nodes up and running we may want to start capturing
packets. The following command can be used in order to start a capture on all
the &lt;code&gt;br-int&lt;/code&gt; bridges.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ export SKYDIVE_USERNAME=admin
$ export SKYDIVE_PASSWORD=password
$ export SKYDIVE_ANALYZERS=localhost:8082 # Should be the same as SERVICE_HOST in local.conf

$ skydive client capture create --gremlin &amp;quot;G.V().Has(&#39;Name&#39;, &#39;br-int&#39;)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ skydive client capture list
{
  &amp;quot;d62b3176-ebc8-44ed-7001-191270dc4d76&amp;quot;: {
    &amp;quot;UUID&amp;quot;: &amp;quot;d62b3176-ebc8-44ed-7001-191270dc4d76&amp;quot;,
    &amp;quot;GremlinQuery&amp;quot;: &amp;quot;G.V().Has(&#39;Name&#39;, &#39;br-int&#39;)&amp;quot;,
    &amp;quot;Count&amp;quot;: 1
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To get Flows captured :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;skydive client query &amp;quot;G.Flows()&amp;quot;
[
  {
    &amp;quot;ANodeTID&amp;quot;: &amp;quot;422190f1-bbde-4eb0-4849-1fd1209229fe&amp;quot;,
    &amp;quot;BNodeTID&amp;quot;: &amp;quot;f3f1256b-7097-487c-7a02-38a32e009b3c&amp;quot;,
    &amp;quot;LastUpdateMetric&amp;quot;: {
      &amp;quot;ABBytes&amp;quot;: 490,
      &amp;quot;ABPackets&amp;quot;: 5,
      &amp;quot;BABytes&amp;quot;: 490,
      &amp;quot;BAPackets&amp;quot;: 5,
      &amp;quot;Last&amp;quot;: 1477567166,
      &amp;quot;Start&amp;quot;: 1477567161
    },
    &amp;quot;LayersPath&amp;quot;: &amp;quot;Ethernet/IPv4/ICMPv4&amp;quot;,
    &amp;quot;Link&amp;quot;: {
      &amp;quot;A&amp;quot;: &amp;quot;02:48:4f:c4:40:99&amp;quot;,
      &amp;quot;B&amp;quot;: &amp;quot;e2:d0:f0:61:e7:81&amp;quot;,
      &amp;quot;Protocol&amp;quot;: &amp;quot;ETHERNET&amp;quot;
    },
    &amp;quot;Metric&amp;quot;: {
      &amp;quot;ABBytes&amp;quot;: 364560,
      &amp;quot;ABPackets&amp;quot;: 3720,
      &amp;quot;BABytes&amp;quot;: 364560,
      &amp;quot;BAPackets&amp;quot;: 3720,
      &amp;quot;Last&amp;quot;: 1477567165,
      &amp;quot;Start&amp;quot;: 1477563444
    },
    &amp;quot;Network&amp;quot;: {
      &amp;quot;A&amp;quot;: &amp;quot;192.168.0.1&amp;quot;,
      &amp;quot;B&amp;quot;: &amp;quot;192.168.0.2&amp;quot;,
      &amp;quot;Protocol&amp;quot;: &amp;quot;IPV4&amp;quot;
    },
    &amp;quot;NodeTID&amp;quot;: &amp;quot;f3f1256b-7097-487c-7a02-38a32e009b3c&amp;quot;,
    &amp;quot;TrackingID&amp;quot;: &amp;quot;f745fb1f59298a1773e35827adfa42dab4f469f9&amp;quot;,
    &amp;quot;UUID&amp;quot;: &amp;quot;caa24da240cb3b40c84ebb708e2e5dcbe3c54784&amp;quot;
  }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For a complete description of the flow structure can be found
&lt;a href=&#34;//skydive-project.github.io/skydive/api/flows/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to deploy Skydive with Docker</title>
      <link>//skydive-project.github.io/skydive/getting-started/docker/</link>
      <pubDate>Fri, 06 May 2016 11:02:01 +0200</pubDate>
      
      <guid>//skydive-project.github.io/skydive/getting-started/docker/</guid>
      <description>

&lt;h2 id=&#34;docker&#34;&gt;Docker&lt;/h2&gt;

&lt;p&gt;A Docker image is available on the &lt;a href=&#34;https://hub.docker.com/r/skydive/&#34;&gt;Skydive Docker Hub account&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To start the analyzer :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;docker run -p 8082:8082 skydive/skydive analyzer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To start the agent :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;docker run --privileged --pid=host --net=host -p 8081:8081 -v /var/run/docker.sock:/var/run/docker.sock skydive/skydive agent
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;docker-compose&#34;&gt;Docker Compose&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;Docker Compose&lt;/a&gt; can also be used to automatically start
an Elasticsearch container, a Skydive analyzer container and a Skydive agent container. The service
definition is located in the &lt;code&gt;contrib/docker&lt;/code&gt; folder of the Skydive sources.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;docker-compose up
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Installation</title>
      <link>//skydive-project.github.io/skydive/getting-started/install/</link>
      <pubDate>Fri, 06 May 2016 11:02:01 +0200</pubDate>
      
      <guid>//skydive-project.github.io/skydive/getting-started/install/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Skydive relies on two main components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;skydive agent, has to be started on each node where the topology and flows
informations will be captured&lt;/li&gt;
&lt;li&gt;skydive analyzer, the node collecting data captured by the agents&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;dependencies&#34;&gt;Dependencies&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Go &amp;gt;= 1.8&lt;/li&gt;
&lt;li&gt;Elasticsearch &amp;gt;= 2.0&lt;/li&gt;
&lt;li&gt;libpcap&lt;/li&gt;
&lt;li&gt;libxml2&lt;/li&gt;
&lt;li&gt;protoc &amp;gt;= 3.0&lt;/li&gt;
&lt;li&gt;llvm&lt;/li&gt;
&lt;li&gt;clang&lt;/li&gt;
&lt;li&gt;kernel-headers / linux-libc-dev&lt;/li&gt;
&lt;li&gt;bcc / bcc-devel&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;install&#34;&gt;Install&lt;/h2&gt;

&lt;p&gt;Make sure you have a working Go environment. &lt;a href=&#34;http://golang.org/doc/install.html&#34;&gt;See the install instructions&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ mkdir -p $GOPATH/src/github.com/skydive-project
$ git clone https://github.com/skydive-project/skydive.git $GOPATH/src/github.com/skydive-project/skydive
$ cd $GOPATH/src/github.com/skydive-project/skydive
$ make install
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;

&lt;p&gt;For a single node setup, the configuration file is optional. For a multiple
node setup, the analyzer IP/PORT need to be adapted.&lt;/p&gt;

&lt;p&gt;Processes are bound to 127.0.0.1 by default, you can explicitly change binding
address with &amp;ldquo;listen: 0.0.0.0:port&amp;rdquo; in the proper configuration sections.&lt;/p&gt;

&lt;p&gt;User can add host metadata to specify an extra host information in
&amp;ldquo;agent.metadata&amp;rdquo; configuration section. All the key value pairs given
under this configuration section will be added to host metadata.&lt;/p&gt;

&lt;p&gt;See the full list of configuration parameters in the sample configuration file
&lt;a href=&#34;https://github.com/skydive-project/skydive/blob/master/etc/skydive.yml.default&#34;&gt;etc/skydive.yml.default&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;start&#34;&gt;Start&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ skydive agent [--conf etc/skydive.yml]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ skydive analyzer [--conf etc/skydive.yml]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;all-in-one&#34;&gt;All-in-one&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;all-in-one&lt;/code&gt; mode can be used to start an Agent and an Analyzer at once.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ skydive allinone [--conf etc/skydive.yml]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Skydive client, API &amp; WebUI</title>
      <link>//skydive-project.github.io/skydive/getting-started/client/</link>
      <pubDate>Fri, 06 May 2016 11:02:01 +0200</pubDate>
      
      <guid>//skydive-project.github.io/skydive/getting-started/client/</guid>
      <description>

&lt;h2 id=&#34;client&#34;&gt;Client&lt;/h2&gt;

&lt;p&gt;Skydive client can be used to interact with Skydive Analyzer and Agents.
Running it without any command will return all the commands available.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ skydive client

Usage:
  skydive client [command]

Available Commands:
  alert       Manage alerts
  capture     Manage captures

Flags:
  -h, --help[=false]: help for client
      --password=&amp;quot;&amp;quot;: password auth parameter
      --username=&amp;quot;&amp;quot;: username auth parameter
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Specifying the subcommand will give the usage of the subcommand.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ skydive client capture
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If an authentication mechanism is defined in the configuration file the username
and password parameter have to be used for each command. Environment variables
SKYDIVE_USERNAME and SKYDIVE_PASSWORD can be used as default value for the
username/password command line parameters.&lt;/p&gt;

&lt;h2 id=&#34;webui&#34;&gt;WebUI&lt;/h2&gt;

&lt;p&gt;To access to the WebUI of agents or analyzer:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;http://&amp;lt;address&amp;gt;:&amp;lt;port&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;topology-requests&#34;&gt;Topology requests&lt;/h2&gt;

&lt;p&gt;Skydive uses the Gremlin traversal language as a topology request language.
Requests on the topology can be done as following :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ skydive client query &amp;quot;G.V().Has(&#39;Name&#39;, &#39;br-int&#39;, &#39;Type&#39; ,&#39;ovsbridge&#39;)&amp;quot;
[
  {
    &amp;quot;Host&amp;quot;: &amp;quot;pc48.home&amp;quot;,
    &amp;quot;ID&amp;quot;: &amp;quot;1e4fc503-312c-4e4f-4bf5-26263ce82e0b&amp;quot;,
    &amp;quot;Metadata&amp;quot;: {
      &amp;quot;Name&amp;quot;: &amp;quot;br-int&amp;quot;,
      &amp;quot;Type&amp;quot;: &amp;quot;ovsbridge&amp;quot;,
      &amp;quot;UUID&amp;quot;: &amp;quot;c80cf5a7-998b-49ca-b2b2-7a1d050facc8&amp;quot;
    }
  }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Refer to the &lt;a href=&#34;//skydive-project.github.io/skydive/api/gremlin/&#34;&gt;Gremlin section&lt;/a&gt; for further
explanations about the syntax and the functions available.&lt;/p&gt;

&lt;h2 id=&#34;flow-captures&#34;&gt;Flow captures&lt;/h2&gt;

&lt;p&gt;Captures are described in &lt;a href=&#34;//skydive-project.github.io/skydive/api/captures/&#34;&gt;this section&lt;/a&gt;
The following command starts a capture on all &lt;code&gt;docker0&lt;/code&gt; interfaces:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ skydive client capture create --gremlin &amp;quot;G.V().Has(&#39;Name&#39;, &#39;docker0&#39;)&amp;quot;

{
  &amp;quot;UUID&amp;quot;: &amp;quot;76de5697-106a-4f50-7455-47c2fa7a964f&amp;quot;,
  &amp;quot;GremlinQuery&amp;quot;: &amp;quot;G.V().Has(&#39;Name&#39;, &#39;docker0&#39;)&amp;quot;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To delete a capture :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ skydive client capture delete &amp;lt;capture UUID&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Flows Gremlin step can be used in order to see the flows captured. See the
&lt;a href=&#34;//skydive-project.github.io/skydive/getting-started/gremlin/&#34;&gt;Gremlin section&lt;/a&gt; for further explanations.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;skydive client query &amp;quot;G.V().Has(&#39;Name&#39;, &#39;docker0&#39;).Flows()&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Getting started</title>
      <link>//skydive-project.github.io/skydive/getting-started/</link>
      <pubDate>Wed, 04 May 2016 17:48:22 +0200</pubDate>
      
      <guid>//skydive-project.github.io/skydive/getting-started/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>