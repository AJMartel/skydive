<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Getting-starteds on Skydive Docs</title>
    <link>//skydive-project.github.io/skydive/getting-started/</link>
    <description>Recent content in Getting-starteds on Skydive Docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 22 Jun 2016 11:02:01 +0200</lastBuildDate>
    <atom:link href="//skydive-project.github.io/skydive/getting-started/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Skydive Gremlin Query language</title>
      <link>//skydive-project.github.io/skydive/getting-started/gremlin/</link>
      <pubDate>Wed, 22 Jun 2016 11:02:01 +0200</pubDate>
      
      <guid>//skydive-project.github.io/skydive/getting-started/gremlin/</guid>
      <description>

&lt;h2 id=&#34;gremlin&#34;&gt;Gremlin&lt;/h2&gt;

&lt;p&gt;Skydive uses a subset of the
&lt;a href=&#34;https://en.wikipedia.org/wiki/Gremlin_(programming_language)&#34;&gt;Gremlin language&lt;/a&gt;
as query language for topology and flow requests.&lt;/p&gt;

&lt;p&gt;A Gremlin expression is a chain of steps that are evaluated from left to right.
In the context of Skydive nodes stand for interfaces, ports, bridges,
namespaces, etc. Links stand for any kind of relation between two nodes,
ownership(host), membership(containers), layer2, etc.&lt;/p&gt;

&lt;p&gt;The following expression will return all the OpenvSwitch ports belonging to
an OpenvSwitch bridge named &lt;code&gt;br-int&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;G.V().Has(&#39;Name&#39;, &#39;br-int&#39;, &#39;Type&#39;, &#39;ovsbridge&#39;).Out()

[
  {
    &amp;quot;Host&amp;quot;: &amp;quot;test&amp;quot;,
    &amp;quot;ID&amp;quot;: &amp;quot;feae10c1-240e-48e0-4a13-c608ffd15700&amp;quot;,
    &amp;quot;Metadata&amp;quot;: {
      &amp;quot;Name&amp;quot;: &amp;quot;vm2-eth0&amp;quot;,
      &amp;quot;Type&amp;quot;: &amp;quot;ovsport&amp;quot;,
      &amp;quot;UUID&amp;quot;: &amp;quot;f68f3593-68c4-4778-b47f-0ef291654fcf&amp;quot;
    }
  },
  {
    &amp;quot;Host&amp;quot;: &amp;quot;test&amp;quot;,
    &amp;quot;ID&amp;quot;: &amp;quot;ca909ccf-203d-457d-70b8-06fe308221ef&amp;quot;,
    &amp;quot;Metadata&amp;quot;: {
      &amp;quot;Name&amp;quot;: &amp;quot;br-int&amp;quot;,
      &amp;quot;Type&amp;quot;: &amp;quot;ovsport&amp;quot;,
      &amp;quot;UUID&amp;quot;: &amp;quot;e5b47010-f479-4def-b2d0-d55f5dbf7dad&amp;quot;
    }
  }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The query has to be read as :&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;G&lt;/code&gt; returns the topology Graph&lt;/li&gt;
&lt;li&gt;&lt;code&gt;V&lt;/code&gt; step returns all the nodes belonging the Graph&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Has&lt;/code&gt; step returns only the node with the given metadata attributes&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Out&lt;/code&gt; step returns outgoing nodes&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;traversal-steps&#34;&gt;Traversal steps&lt;/h2&gt;

&lt;p&gt;The Skydive implements a subset of the Gremlin language steps and adds
&amp;ldquo;network analysis&amp;rdquo; specific steps.&lt;/p&gt;

&lt;h3 id=&#34;v-step&#34;&gt;V Step&lt;/h3&gt;

&lt;p&gt;V step returns the nodes belonging to the graph.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;G.V()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A node ID can be passed to the V step which will return the corresponding node.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;G.V(&#39;ca909ccf-203d-457d-70b8-06fe308221efca909ccf-203d-457d-70b8-06fe308221ef&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;has-step&#34;&gt;Has Step&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Has&lt;/code&gt; step filters out the nodes that don&amp;rsquo;t match the given metadata list. &lt;code&gt;Has&lt;/code&gt;
can be applied either on nodes or edges.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;G.V().Has(&#39;Name&#39;: test, &#39;Type&#39;: &#39;netns&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;in-out-both-steps&#34;&gt;In/Out/Both steps&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;In/Out&lt;/code&gt; steps returns either incoming, outgoing or neighbor nodes of
previously selected nodes.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;G.V().Has(&#39;Name&#39;, &#39;br-int&#39;, &#39;Type&#39;, &#39;ovsbridge&#39;).Out()
G.V().Has(&#39;Name&#39;, &#39;br-int&#39;, &#39;Type&#39;, &#39;ovsbridge&#39;).In()
G.V().Has(&#39;Name&#39;, &#39;br-int&#39;, &#39;Type&#39;, &#39;ovsbridge&#39;).Both()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Filters can be applied to these steps in order to select only the nodes
corresponding to the given metadata. In that case the step will act as a couple
of steps &lt;code&gt;Out/Has&lt;/code&gt; for example.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;G.V().Has(&#39;Name&#39;, &#39;br-int&#39;, &#39;Type&#39;, &#39;ovsbridge&#39;).Out(&#39;Name&#39;, &#39;intf1&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ine-oute-steps&#34;&gt;InE/OutE steps&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;InE/OutE&lt;/code&gt; steps returns the incoming/ougoing links.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;G.V().Has(&#39;Name&#39;: &#39;test&#39;, &#39;Type&#39;: &#39;netns&#39;).InE()
G.V().Has(&#39;Name&#39;: &#39;test&#39;, &#39;Type&#39;: &#39;netns&#39;).OutE()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Like for the &lt;code&gt;In/Out/Both&lt;/code&gt; steps metadata list can be passed directly as
parameters in order to filter links.&lt;/p&gt;

&lt;h3 id=&#34;inv-outv-steps&#34;&gt;InV/OutV steps&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;InV/OutV&lt;/code&gt; steps returns incoming, outgoing nodes attached to the previously
selected links.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;G.V().OutE().Has(&#39;Type&#39;, &#39;layer2&#39;).InV()
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;dedup-step&#34;&gt;Dedup step&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Dedup&lt;/code&gt; removes duplicated nodes/links.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;G.V().Out().Both().Dedup()
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;shortestpathto-step&#34;&gt;ShortestPathTo step&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;ShortestPathTo&lt;/code&gt; step returns the shortest path to node matching the given
&lt;code&gt;Metadata&lt;/code&gt; predicate. This step returns a list of all the nodes traversed.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;G.V().Has(&#39;Type&#39;, &#39;netns&#39;).ShortestPathTo(Metadata(&#39;Type&#39;, &#39;host&#39;))

[
  [
    {
      &amp;quot;Host&amp;quot;: &amp;quot;test&amp;quot;,
      &amp;quot;ID&amp;quot;: &amp;quot;5221d3c3-3180-4a64-5337-f2f66b83ddd6&amp;quot;,
      &amp;quot;Metadata&amp;quot;: {
        &amp;quot;Name&amp;quot;: &amp;quot;vm1&amp;quot;,
        &amp;quot;Path&amp;quot;: &amp;quot;/var/run/netns/vm1&amp;quot;,
        &amp;quot;Type&amp;quot;: &amp;quot;netns&amp;quot;
      }
    },
    {
      &amp;quot;Host&amp;quot;: &amp;quot;test&amp;quot;,
      &amp;quot;ID&amp;quot;: &amp;quot;test&amp;quot;,
      &amp;quot;Metadata&amp;quot;: {
        &amp;quot;Name&amp;quot;: &amp;quot;pc48.home&amp;quot;,
        &amp;quot;Type&amp;quot;: &amp;quot;host&amp;quot;
      }
    }
  ]
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is possible to filter the link traversed according to the given &lt;code&gt;Metadata&lt;/code&gt;
predicate as a second parameter.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;G.V().Has(&#39;Type&#39;, &#39;netns&#39;).ShortestPathTo(Metadata(&#39;Type&#39;, &#39;host&#39;), Metadata(&#39;Type&#39;, &#39;layer2&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;graphpath-step&#34;&gt;GraphPath step&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;GraphPath&lt;/code&gt; step returns a path string corresponding to the reverse path
from the nodes to the host node they belong to.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;G.V().Has(&#39;Type&#39;, &#39;netns&#39;).GraphPath()

[
  &amp;quot;test[Type=host]/vm1[Type=netns]&amp;quot;
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The format of the path returned is the following:
&lt;code&gt;node_name[Type=node_type]/.../node_name[Type=node_type]&lt;/code&gt;`&lt;/p&gt;

&lt;h3 id=&#34;flows-step&#34;&gt;Flows step&lt;/h3&gt;

&lt;p&gt;Flows step returns flows of nodes where a capture has been started or of nodes
where the packets are coming from or going to.
The following Gremlin query returns the flows from the node &lt;code&gt;br-int&lt;/code&gt; where
an sFlow capture has been started.
See the &lt;a href=&#34;//skydive-project.github.io/skydive/getting-started/client/#flow-captures&#34;&gt;client section&lt;/a&gt;
in order to know how to start a capture from a Gremlin query.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;G.V().Has(&#39;Name&#39;, &#39;br-int&#39;).Flows()
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;flows-in-out-steps&#34;&gt;Flows In/Out steps&lt;/h3&gt;

&lt;p&gt;From a flow step it is possible to get the node from where the packets are
coming or the node where packets are going to. Node steps are of course
applicable after &lt;code&gt;In/Out&lt;/code&gt; flow steps.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;G.V().Has(&#39;Name&#39;, &#39;br-int&#39;).Flows().In()
G.V().Has(&#39;Name&#39;, &#39;br-int&#39;).Flows().Out()
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;predicates&#34;&gt;Predicates&lt;/h3&gt;

&lt;p&gt;Predicates can be used with &lt;code&gt;Has&lt;/code&gt;, &lt;code&gt;In*&lt;/code&gt;&lt;code&gt;,&lt;/code&gt;Out*`` steps.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NE&lt;/code&gt;, matches graph elements for which metadata don&amp;rsquo;t match specified values&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;G.V().Has(&#39;Type&#39;, NE(&#39;ovsbridge&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Within&lt;/code&gt;, matches graph elements for which metadata values match one member of
the given array.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;G.V().Has(&#39;Type&#39;, Within(&#39;ovsbridge&#39;, &#39;ovsport&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Without&lt;/code&gt;, matches graph elements for which metadata values don&amp;rsquo;t match any of
the members of the given array.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;G.V().Has(&#39;Type&#39;, Without(&#39;ovsbridge&#39;, &#39;ovsport&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Regex&lt;/code&gt;, matches graph elements for which metadata matches the given regular
expression.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;G.V().Has(&#39;Name&#39;, Regex(&#39;tap-&#39;))
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>How to deploy Skydive with kubernetes</title>
      <link>//skydive-project.github.io/skydive/getting-started/kubernetes/</link>
      <pubDate>Sat, 14 May 2016 11:02:01 +0200</pubDate>
      
      <guid>//skydive-project.github.io/skydive/getting-started/kubernetes/</guid>
      <description>

&lt;h2 id=&#34;kubernetes-deployment&#34;&gt;Kubernetes deployment&lt;/h2&gt;

&lt;p&gt;Skydive provides a Kubernetes
&lt;a href=&#34;https://github.com/skydive-project/skydive/blob/master/contrib/kubernetes/skydive.yaml&#34;&gt;file&lt;/a&gt;
which can be used to deploy Skydive. It will deploy an Elasticsearch,
a Skydive analyzer and Skydive Agent on each Kubernetes nodes. Once you will
have Skydive deployment on top on your Kubernetes cluster you will be able to
monitor, capture, troubleshoot your container networking stack.&lt;/p&gt;

&lt;p&gt;A skydive Analyzer &lt;a href=&#34;http://kubernetes.io/docs/user-guide/services/&#34;&gt;Kubernetes service&lt;/a&gt;
is created and exposes ports for Elasticsearch and the Analyzer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Elasticsearch: 9200&lt;/li&gt;
&lt;li&gt;Analyzer: 8082&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://kubernetes.io/docs/admin/daemons/&#34;&gt;Kubernetes DaemonSet&lt;/a&gt; is used for
Agents in order to have one Agent per node.&lt;/p&gt;

&lt;h2 id=&#34;creation&#34;&gt;Creation&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;kubectl create -f skydive.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you have your environment set up, going to the Analyzer service
should show similar to the following capture.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//skydive-project.github.io/skydive/images/kubernetes-two-nodes.png&#34; alt=&#34;WebUI Capture&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to deploy Skydive with Devstack</title>
      <link>//skydive-project.github.io/skydive/getting-started/devstack/</link>
      <pubDate>Fri, 06 May 2016 11:02:01 +0200</pubDate>
      
      <guid>//skydive-project.github.io/skydive/getting-started/devstack/</guid>
      <description>

&lt;h2 id=&#34;devstack-plugin&#34;&gt;Devstack plugin&lt;/h2&gt;

&lt;p&gt;Skydive provides a DevStack plugin that can be used in order to have
Skydive Agents/Analyzer set up with the proper probes
by DevStack.&lt;/p&gt;

&lt;p&gt;For a single node setup adding the following lines to your local.conf file
should be enough.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;enable_plugin skydive https://github.com/skydive-project/skydive.git

enable_service skydive-agent skydive-analyzer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The plugin accepts the following parameters:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;# Address on which skydive analyzer process listens for connections.
# Must be in ip:port format
#SKYDIVE_ANALYZER_LISTEN=

# Inform the agent about the address on which analyzers are listening
# Must be in ip:port format
#SKYDIVE_AGENT_ANALYZERS=

# ip:port address on which skydive agent listens for connections.
#SKYDIVE_AGENT_LISTEN=

# Configure the skydive agent with the etcd server address
# http://IP_ADDRESS:2379
#SKYDIVE_AGENT_ETCD=

# The path for the generated skydive configuration file
#SKYDIVE_CONFIG_FILE=

# List of agent probes to be used by the agent
# Ex: netns netlink ovsdb
#SKYDIVE_AGENT_PROBES=

# Remote port for ovsdb server.
#SKYDIVE_OVSDB_REMOTE_PORT=6640

# Set the default log level, default: INFO
#SKYDIVE_LOGLEVEL=DEBUG
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;the-classical-two-nodes-deployment&#34;&gt;The classical two nodes deployment&lt;/h2&gt;

&lt;p&gt;Inside the Devstack folder of the Skydive sources there are two local.conf files
that can be used in order to deployment two Devstack with Skydive. The first
file will install a full Devstack with Skydive analyzer and agent. The second
one will install a compute Devstack with only the skydive agent.&lt;/p&gt;

&lt;p&gt;Skydive will be set with the probes for OpenvSwitch and Neutron. It will be set
to use Keystone as authentication mechanism, so the credentials will be the same
than the admin.&lt;/p&gt;

&lt;p&gt;Once you have your environment set up, going to the Analyzer Web Interface
should show similar to the following capture.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//skydive-project.github.io/skydive/images/devstack-two-nodes.png&#34; alt=&#34;WebUI Capture&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;capture-traffic&#34;&gt;Capture traffic&lt;/h2&gt;

&lt;p&gt;Now we have our two nodes up and running we may want to start capturing
packets. The following command can be used in order to start a capture on all
the &lt;code&gt;br-int&lt;/code&gt; bridges.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ export SKYDIVE_USERNAME=admin
$ export SKYDIVE_PASSWORD=password

$ skydive client -c /tmp/skydive.yaml capture create \
  --probepath &amp;quot;*/br-int[Type=ovsbridge]&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ skydive client -c /tmp/skydive.yaml capture list
{
  &amp;quot;*/br-int[Type=ovsbridge]&amp;quot;: {
    &amp;quot;ProbePath&amp;quot;: &amp;quot;*/br-int[Type=ovsbridge]&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A request on Elasticsearch will give us the traffic captured. Here after a ping
between the qrouter and the qdhcp namespaces.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;curl -s http://localhost:9200/_search | jq .hits.hits[0]
{
  &amp;quot;_source&amp;quot;: {
    &amp;quot;IfDstGraphPath&amp;quot;: &amp;quot;devstack-1[Type=host]/qdhcp-cb5e9887-0779-48d1-aac6-b48e4d688056[Type=netns]/tap8ce0a68c-38[Type=internal]&amp;quot;,
    &amp;quot;IfSrcGraphPath&amp;quot;: &amp;quot;devstack-1[Type=host]/qrouter-c616325e-f3d9-497b-adfa-afe06a5a6245[Type=netns]/qr-26fe372c-b6[Type=internal]&amp;quot;,
    &amp;quot;ProbeGraphPath&amp;quot;: &amp;quot;devstack-1[Type=host]/br-int[Type=ovsbridge]&amp;quot;,
    &amp;quot;TrackingID&amp;quot;: &amp;quot;684924892c321f69599f826eb151acb103c4e8a3&amp;quot;,
    &amp;quot;Statistics&amp;quot;: {
      &amp;quot;Endpoints&amp;quot;: [
        {
          &amp;quot;BA&amp;quot;: {
            &amp;quot;Bytes&amp;quot;: 4700,
            &amp;quot;Packets&amp;quot;: 47,
            &amp;quot;Value&amp;quot;: &amp;quot;fa:16:3e:85:ca:e1&amp;quot;
          },
          &amp;quot;AB&amp;quot;: {
            &amp;quot;Bytes&amp;quot;: 4700,
            &amp;quot;Packets&amp;quot;: 47,
            &amp;quot;Value&amp;quot;: &amp;quot;fa:16:3e:9c:49:a5&amp;quot;
          },
          &amp;quot;Type&amp;quot;: &amp;quot;ETHERNET&amp;quot;
        },
        {
          &amp;quot;BA&amp;quot;: {
            &amp;quot;Bytes&amp;quot;: 3948,
            &amp;quot;Packets&amp;quot;: 47,
            &amp;quot;Value&amp;quot;: &amp;quot;10.0.0.2&amp;quot;
          },
          &amp;quot;AB&amp;quot;: {
            &amp;quot;Bytes&amp;quot;: 3948,
            &amp;quot;Packets&amp;quot;: 47,
            &amp;quot;Value&amp;quot;: &amp;quot;10.0.0.1&amp;quot;
          },
          &amp;quot;Type&amp;quot;: &amp;quot;IPV4&amp;quot;
        }
      ],
      &amp;quot;Last&amp;quot;: 1464279198,
      &amp;quot;Start&amp;quot;: 1464279141
    },
    &amp;quot;LayersPath&amp;quot;: &amp;quot;Ethernet/IPv4/ICMPv4/Payload&amp;quot;,
    &amp;quot;UUID&amp;quot;: &amp;quot;a24497056a12484c181585b7a1344b95e3197955&amp;quot;
  },
  &amp;quot;_score&amp;quot;: 1,
  &amp;quot;_id&amp;quot;: &amp;quot;a24497056a12484c181585b7a1344b95e3197955&amp;quot;,
  &amp;quot;_type&amp;quot;: &amp;quot;flow&amp;quot;,
  &amp;quot;_index&amp;quot;: &amp;quot;skydive_v1&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>How to deploy Skydive with Docker</title>
      <link>//skydive-project.github.io/skydive/getting-started/docker/</link>
      <pubDate>Fri, 06 May 2016 11:02:01 +0200</pubDate>
      
      <guid>//skydive-project.github.io/skydive/getting-started/docker/</guid>
      <description>

&lt;h2 id=&#34;docker&#34;&gt;Docker&lt;/h2&gt;

&lt;p&gt;A Docker image is available on the &lt;a href=&#34;https://hub.docker.com/r/skydive/&#34;&gt;Skydive Docker Hub account&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To start the analyzer :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;docker run -p 8082:8082 -p 2379:2379 skydive/skydive analyzer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To start the agent :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;docker run --privileged --pid=host --net=host -p 8081:8081 -v /var/run/docker.sock:/var/run/docker.sock skydive/skydive agent
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;docker-compose&#34;&gt;Docker Compose&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;Docker Compose&lt;/a&gt; can also be used to automatically start
an Elasticsearch container, a Skydive analyzer container and a Skydive agent container. The service
definition is located in the &lt;code&gt;contrib/docker&lt;/code&gt; folder of the Skydive sources.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;docker-compose up
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Installation</title>
      <link>//skydive-project.github.io/skydive/getting-started/install/</link>
      <pubDate>Fri, 06 May 2016 11:02:01 +0200</pubDate>
      
      <guid>//skydive-project.github.io/skydive/getting-started/install/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Skydive relies on two main components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;skydive agent, has to be started on each node where the topology and flows
informations will be captured&lt;/li&gt;
&lt;li&gt;skydive analyzer, the node collecting data captured by the agents&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;dependencies&#34;&gt;Dependencies&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Go &amp;gt;= 1.5&lt;/li&gt;
&lt;li&gt;Elasticsearch &amp;gt;= 2.0&lt;/li&gt;
&lt;li&gt;libpcap&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;install&#34;&gt;Install&lt;/h2&gt;

&lt;p&gt;Make sure you have a working Go environment. &lt;a href=&#34;http://golang.org/doc/install.html&#34;&gt;See the install instructions&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ mkdir -p $GOPATH/src/github.com/skydive-project
$ git clone https://github.com/skydive-project/skydive.git $GOPATH/src/github.com/skydive-project/skydive
$ cd $GOPATH/src/github.com/skydive-project/skydive
$ make install
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;

&lt;p&gt;For a single node setup, the configuration file is optional. For a multiple
node setup, the analyzer IP/PORT need to be adapted.&lt;/p&gt;

&lt;p&gt;Processes are bound to 127.0.0.1 by default, you can explicitly change binding
address with &amp;ldquo;listen: 0.0.0.0:port&amp;rdquo; in the proper configuration sections.&lt;/p&gt;

&lt;p&gt;User can add host metadata to specify an extra host information in
&amp;ldquo;agent.metadata&amp;rdquo; configuration section. All the key value pairs given
under this configuration section will be added to host metadata.&lt;/p&gt;

&lt;p&gt;See the full list of configuration parameters in the sample configuration file
&lt;a href=&#34;https://github.com/skydive-project/skydive/blob/master/etc/skydive.yml.default&#34;&gt;etc/skydive.yml.default&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;start&#34;&gt;Start&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ skydive agent [--conf etc/skydive.yml]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ skydive analyzer [--conf etc/skydive.yml]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Skydive client, API &amp; WebUI</title>
      <link>//skydive-project.github.io/skydive/getting-started/client/</link>
      <pubDate>Fri, 06 May 2016 11:02:01 +0200</pubDate>
      
      <guid>//skydive-project.github.io/skydive/getting-started/client/</guid>
      <description>

&lt;h2 id=&#34;client&#34;&gt;Client&lt;/h2&gt;

&lt;p&gt;Skydive client can be used to interact with Skydive Analyzer and Agents.
Running it without any command will return all the commands available.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ skydive client

Usage:
  skydive client [command]

Available Commands:
  alert       Manage alerts
  capture     Manage captures

Flags:
  -h, --help[=false]: help for client
      --password=&amp;quot;&amp;quot;: password auth parameter
      --username=&amp;quot;&amp;quot;: username auth parameter
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Specifying the subcommand will give the usage of the subcommand.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ skydive client capture
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If an authentication mechanism is defined in the configuration file the username
and password parameter have to be used for each command. Environment variables
SKYDIVE_USERNAME and SKYDIVE_PASSWORD can be used as default value for the
username/password command line parameters.&lt;/p&gt;

&lt;h2 id=&#34;webui&#34;&gt;WebUI&lt;/h2&gt;

&lt;p&gt;To access to the WebUI of agents or analyzer:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;http://&amp;lt;address&amp;gt;:&amp;lt;port&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;topology-requests&#34;&gt;Topology requests&lt;/h2&gt;

&lt;p&gt;Skydive uses the Gremlin traversal language as a topology request language.
Requests on the topology can be done as following :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ skydive client topology query --gremlin &amp;quot;G.V().Has(&#39;Name&#39;, &#39;br-int&#39;, &#39;Type&#39; ,&#39;ovsbridge&#39;)&amp;quot;
[
  {
    &amp;quot;Host&amp;quot;: &amp;quot;pc48.home&amp;quot;,
    &amp;quot;ID&amp;quot;: &amp;quot;1e4fc503-312c-4e4f-4bf5-26263ce82e0b&amp;quot;,
    &amp;quot;Metadata&amp;quot;: {
      &amp;quot;Name&amp;quot;: &amp;quot;br-int&amp;quot;,
      &amp;quot;Type&amp;quot;: &amp;quot;ovsbridge&amp;quot;,
      &amp;quot;UUID&amp;quot;: &amp;quot;c80cf5a7-998b-49ca-b2b2-7a1d050facc8&amp;quot;
    }
  }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Refer to the &lt;a href=&#34;//skydive-project.github.io/skydive/getting-started/gremlin/&#34;&gt;Gremlin section&lt;/a&gt; for further
explanations about the syntax and the functions available.&lt;/p&gt;

&lt;h2 id=&#34;flow-captures&#34;&gt;Flow captures&lt;/h2&gt;

&lt;p&gt;Flow captures can be started from the WebUI or thanks to the Skydive client.
Skydive leverages the Gremlin language in order to select nodes on which a
capture will be started. The gremlin expression is continuously evaluated which
means that it is possible to define a capture on nodes that don&amp;rsquo;t exist yet.
It useful when you want to start a capture on all OpenvSwitch whatever the
number of Skydive agents you will start.&lt;/p&gt;

&lt;p&gt;The following command start a capture on all docker0 interfaces&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ skydive client capture create --gremlin &amp;quot;G.V().Has(&#39;Name&#39;, &#39;docker0&#39;)&amp;quot;

{
  &amp;quot;UUID&amp;quot;: &amp;quot;76de5697-106a-4f50-7455-47c2fa7a964f&amp;quot;,
  &amp;quot;GremlinQuery&amp;quot;: &amp;quot;G.V().Has(&#39;Name&#39;, &#39;docker0&#39;)&amp;quot;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While starting the capture, you can specify the capture name,
capture description and capture type optionally.
In order to know the list of supported capture types, see the usage doc of flow capture.&lt;/p&gt;

&lt;p&gt;Node types that support captures are :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ovsbridge&lt;/li&gt;
&lt;li&gt;veth&lt;/li&gt;
&lt;li&gt;device&lt;/li&gt;
&lt;li&gt;internal&lt;/li&gt;
&lt;li&gt;tun&lt;/li&gt;
&lt;li&gt;bridge&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To delete a capture :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ skydive client capture delete &amp;lt;capture UUID&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Flows Gremlin step can be used in order to see the flows captured. See the
&lt;a href=&#34;//skydive-project.github.io/skydive/getting-started/gremlin/&#34;&gt;Gremlin section&lt;/a&gt; for further explanations.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;skydive client topology query --gremlin &amp;quot;G.V().Has(&#39;Name&#39;, &#39;docker0&#39;).Flows()&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Getting started</title>
      <link>//skydive-project.github.io/skydive/getting-started/</link>
      <pubDate>Wed, 04 May 2016 17:48:22 +0200</pubDate>
      
      <guid>//skydive-project.github.io/skydive/getting-started/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>